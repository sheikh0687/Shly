//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `DetailVC`, and contains static references to 4 segues.
    struct detailVC {
      /// Segue identifier `ContAboutVC`.
      static let contAboutVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DetailVC, ContAboutVC> = Rswift.StoryboardSegueIdentifier(identifier: "ContAboutVC")
      /// Segue identifier `ContGallaryVC`.
      static let contGallaryVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DetailVC, ContGallaryVC> = Rswift.StoryboardSegueIdentifier(identifier: "ContGallaryVC")
      /// Segue identifier `ContReviewVC`.
      static let contReviewVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DetailVC, ContReviewVC> = Rswift.StoryboardSegueIdentifier(identifier: "ContReviewVC")
      /// Segue identifier `ContServiceVC`.
      static let contServiceVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DetailVC, ContServiceVC> = Rswift.StoryboardSegueIdentifier(identifier: "ContServiceVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ContAboutVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func contAboutVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DetailVC, ContAboutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.detailVC.contAboutVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ContGallaryVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func contGallaryVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DetailVC, ContGallaryVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.detailVC.contGallaryVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ContReviewVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func contReviewVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DetailVC, ContReviewVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.detailVC.contReviewVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ContServiceVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func contServiceVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DetailVC, ContServiceVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.detailVC.contServiceVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SearchResultsVC`, and contains static references to 2 segues.
    struct searchResultsVC {
      /// Segue identifier `ListVC`.
      static let listVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchResultsVC, ConListVC> = Rswift.StoryboardSegueIdentifier(identifier: "ListVC")
      /// Segue identifier `MapVC`.
      static let mapVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchResultsVC, ConMapVC> = Rswift.StoryboardSegueIdentifier(identifier: "MapVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func listVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchResultsVC, ConListVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchResultsVC.listVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `MapVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func mapVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchResultsVC, ConMapVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchResultsVC.mapVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor 1`.
    static let accentColor1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor 1")
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `ButtonColor`.
    static let buttonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonColor")
    /// Color `ThemeColor`.
    static let themeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor 1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor 1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 195 images.
  struct image {
    /// Image `Chat24`.
    static let chat24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat24")
    /// Image `ClientImage`.
    static let clientImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClientImage")
    /// Image `ClientNew`.
    static let clientNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClientNew")
    /// Image `Earning24`.
    static let earning24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Earning24")
    /// Image `Edit24`.
    static let edit24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit24")
    /// Image `Ellipse 995`.
    static let ellipse995 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 995")
    /// Image `FindDark`.
    static let findDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "FindDark")
    /// Image `Group 11544`.
    static let group11544 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 11544")
    /// Image `Group 11545`.
    static let group11545 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 11545")
    /// Image `Group 11546`.
    static let group11546 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 11546")
    /// Image `HidePassword`.
    static let hidePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "HidePassword")
    /// Image `Home24`.
    static let home24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home24")
    /// Image `Location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "Location")
    /// Image `Notification30`.
    static let notification30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notification30")
    /// Image `Order24`.
    static let order24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Order24")
    /// Image `Plus24`.
    static let plus24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus24")
    /// Image `ProviderNew`.
    static let providerNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProviderNew")
    /// Image `Rectangle 4861`.
    static let rectangle4861 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4861")
    /// Image `RectangleChecked`.
    static let rectangleChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleChecked")
    /// Image `RectangleUncheck`.
    static let rectangleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheck")
    /// Image `SHLY (3) 1`.
    static let shly31 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SHLY (3) 1")
    /// Image `ServiceProvider`.
    static let serviceProvider = Rswift.ImageResource(bundle: R.hostingBundle, name: "ServiceProvider")
    /// Image `Setting24`.
    static let setting24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Setting24")
    /// Image `ShowPassword`.
    static let showPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShowPassword")
    /// Image `Slide1`.
    static let slide1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide1")
    /// Image `Slide2`.
    static let slide2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide2")
    /// Image `Slide3`.
    static let slide3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide3")
    /// Image `Slide4`.
    static let slide4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide4")
    /// Image `Star18`.
    static let star18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star18")
    /// Image `Start 14`.
    static let start14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Start 14")
    /// Image `account`.
    static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "account")
    /// Image `americanexpress`.
    static let americanexpress = Rswift.ImageResource(bundle: R.hostingBundle, name: "americanexpress")
    /// Image `app_icon`.
    static let app_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_icon")
    /// Image `badge`.
    static let badge = Rswift.ImageResource(bundle: R.hostingBundle, name: "badge")
    /// Image `bannerimg`.
    static let bannerimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bannerimg")
    /// Image `barber`.
    static let barber = Rswift.ImageResource(bundle: R.hostingBundle, name: "barber")
    /// Image `barberback`.
    static let barberback = Rswift.ImageResource(bundle: R.hostingBundle, name: "barberback")
    /// Image `barbermarker`.
    static let barbermarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "barbermarker")
    /// Image `barberstore`.
    static let barberstore = Rswift.ImageResource(bundle: R.hostingBundle, name: "barberstore")
    /// Image `black_back`.
    static let black_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_back")
    /// Image `booking_active`.
    static let booking_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking_active")
    /// Image `booking_back`.
    static let booking_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking_back")
    /// Image `booking_deactive`.
    static let booking_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking_deactive")
    /// Image `bookinglist_back`.
    static let bookinglist_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookinglist_back")
    /// Image `cancelRed`.
    static let cancelRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelRed")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `cat_clean`.
    static let cat_clean = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat_clean")
    /// Image `catic`.
    static let catic = Rswift.ImageResource(bundle: R.hostingBundle, name: "catic")
    /// Image `chat_active`.
    static let chat_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_active")
    /// Image `chat_deactive`.
    static let chat_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_deactive")
    /// Image `checkcircle`.
    static let checkcircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkcircle")
    /// Image `cleaning`.
    static let cleaning = Rswift.ImageResource(bundle: R.hostingBundle, name: "cleaning")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `cong`.
    static let cong = Rswift.ImageResource(bundle: R.hostingBundle, name: "cong")
    /// Image `contactus`.
    static let contactus = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactus")
    /// Image `customer`.
    static let customer = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer")
    /// Image `cutzsplashback`.
    static let cutzsplashback = Rswift.ImageResource(bundle: R.hostingBundle, name: "cutzsplashback")
    /// Image `cycling`.
    static let cycling = Rswift.ImageResource(bundle: R.hostingBundle, name: "cycling")
    /// Image `dateic`.
    static let dateic = Rswift.ImageResource(bundle: R.hostingBundle, name: "dateic")
    /// Image `ddddddd`.
    static let ddddddd = Rswift.ImageResource(bundle: R.hostingBundle, name: "ddddddd")
    /// Image `delete_ic`.
    static let delete_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_ic")
    /// Image `downarrow`.
    static let downarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarrow")
    /// Image `drawer_icon`.
    static let drawer_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_icon")
    /// Image `dummy_user`.
    static let dummy_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_user")
    /// Image `earning_active`.
    static let earning_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "earning_active")
    /// Image `earning_deactive`.
    static let earning_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "earning_deactive")
    /// Image `edit_new`.
    static let edit_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_new")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `fav_active`.
    static let fav_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_active")
    /// Image `fav_deactive`.
    static let fav_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_deactive")
    /// Image `fav`.
    static let fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav")
    /// Image `feed_active`.
    static let feed_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_active")
    /// Image `feed_deactive`.
    static let feed_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_deactive")
    /// Image `feedback`.
    static let feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedback")
    /// Image `filter_ic`.
    static let filter_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_ic")
    /// Image `findbuddy_active`.
    static let findbuddy_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_active")
    /// Image `findbuddy_deactive`.
    static let findbuddy_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_deactive")
    /// Image `fitmarket_active`.
    static let fitmarket_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_active")
    /// Image `fitmarket_deactive`.
    static let fitmarket_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_deactive")
    /// Image `friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends")
    /// Image `gall_im1`.
    static let gall_im1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gall_im1")
    /// Image `gallaryimg`.
    static let gallaryimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "gallaryimg")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `greychat`.
    static let greychat = Rswift.ImageResource(bundle: R.hostingBundle, name: "greychat")
    /// Image `hairdie`.
    static let hairdie = Rswift.ImageResource(bundle: R.hostingBundle, name: "hairdie")
    /// Image `hairdresser`.
    static let hairdresser = Rswift.ImageResource(bundle: R.hostingBundle, name: "hairdresser")
    /// Image `head`.
    static let head = Rswift.ImageResource(bundle: R.hostingBundle, name: "head")
    /// Image `heart_dislike`.
    static let heart_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_dislike")
    /// Image `heart_like`.
    static let heart_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_like")
    /// Image `helpandsupport`.
    static let helpandsupport = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpandsupport")
    /// Image `history_deactive`.
    static let history_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "history_deactive")
    /// Image `history`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "history")
    /// Image `home_active`.
    static let home_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_active")
    /// Image `home_deactive`.
    static let home_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_deactive")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `homeback`.
    static let homeback = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeback")
    /// Image `house`.
    static let house = Rswift.ImageResource(bundle: R.hostingBundle, name: "house")
    /// Image `ic_CheckedCircle_Black`.
    static let ic_CheckedCircle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_CheckedCircle_Black")
    /// Image `ic_Circle_Black`.
    static let ic_Circle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Circle_Black")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `iconoir_cancel`.
    static let iconoir_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconoir_cancel")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `invvite`.
    static let invvite = Rswift.ImageResource(bundle: R.hostingBundle, name: "invvite")
    /// Image `itemimage`.
    static let itemimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "itemimage")
    /// Image `journal_activity`.
    static let journal_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "journal_activity")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `last_trans`.
    static let last_trans = Rswift.ImageResource(bundle: R.hostingBundle, name: "last_trans")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `location_active`.
    static let location_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_active")
    /// Image `locationic`.
    static let locationic = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationic")
    /// Image `loclogo`.
    static let loclogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "loclogo")
    /// Image `logo 1`.
    static let logo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo 1")
    /// Image `logo_new`.
    static let logo_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_new")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `mastercard`.
    static let mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard")
    /// Image `members`.
    static let members = Rswift.ImageResource(bundle: R.hostingBundle, name: "members")
    /// Image `menu_horizontal`.
    static let menu_horizontal = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_horizontal")
    /// Image `menu_vertical`.
    static let menu_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_vertical")
    /// Image `myfav`.
    static let myfav = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfav")
    /// Image `myfeed`.
    static let myfeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfeed")
    /// Image `mypost`.
    static let mypost = Rswift.ImageResource(bundle: R.hostingBundle, name: "mypost")
    /// Image `near_barber`.
    static let near_barber = Rswift.ImageResource(bundle: R.hostingBundle, name: "near_barber")
    /// Image `nearbuddy`.
    static let nearbuddy = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearbuddy")
    /// Image `nearme`.
    static let nearme = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearme")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `padlock`.
    static let padlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "padlock")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `phone`.
    static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `placeholder_2`.
    static let placeholder_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_2")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plus1`.
    static let plus1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus1")
    /// Image `plus_active`.
    static let plus_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_active")
    /// Image `plus_deactive`.
    static let plus_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_deactive")
    /// Image `plus_only`.
    static let plus_only = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_only")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `post_img`.
    static let post_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_img")
    /// Image `privacy_policy`.
    static let privacy_policy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy_policy")
    /// Image `privacy`.
    static let privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy")
    /// Image `profile_active`.
    static let profile_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_active")
    /// Image `profile_deactive`.
    static let profile_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_deactive")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `profiledeactive`.
    static let profiledeactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profiledeactive")
    /// Image `provider_choose_img`.
    static let provider_choose_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "provider_choose_img")
    /// Image `provider_img`.
    static let provider_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "provider_img")
    /// Image `provider`.
    static let provider = Rswift.ImageResource(bundle: R.hostingBundle, name: "provider")
    /// Image `referfriend`.
    static let referfriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "referfriend")
    /// Image `reviews-outline`.
    static let reviewsOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "reviews-outline")
    /// Image `round_logo`.
    static let round_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "round_logo")
    /// Image `salonmarker`.
    static let salonmarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "salonmarker")
    /// Image `saloon_2`.
    static let saloon_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "saloon_2")
    /// Image `saloon_img`.
    static let saloon_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "saloon_img")
    /// Image `saloonback`.
    static let saloonback = Rswift.ImageResource(bundle: R.hostingBundle, name: "saloonback")
    /// Image `saving`.
    static let saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "saving")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `selectitem`.
    static let selectitem = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectitem")
    /// Image `sendmessage`.
    static let sendmessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendmessage")
    /// Image `service_active`.
    static let service_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "service_active")
    /// Image `service_deactive`.
    static let service_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "service_deactive")
    /// Image `serviceimg`.
    static let serviceimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "serviceimg")
    /// Image `servicelist`.
    static let servicelist = Rswift.ImageResource(bundle: R.hostingBundle, name: "servicelist")
    /// Image `setting_active`.
    static let setting_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_active")
    /// Image `setting_deactive`.
    static let setting_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_deactive")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `settings_deactive`.
    static let settings_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_deactive")
    /// Image `shampoo`.
    static let shampoo = Rswift.ImageResource(bundle: R.hostingBundle, name: "shampoo")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `sharefriend`.
    static let sharefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharefriend")
    /// Image `slide_1`.
    static let slide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1")
    /// Image `slide_2`.
    static let slide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_2")
    /// Image `slide_3`.
    static let slide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_3")
    /// Image `slide_4`.
    static let slide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_4")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `subscribe`.
    static let subscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscribe")
    /// Image `subscription`.
    static let subscription = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription")
    /// Image `terms_conditions`.
    static let terms_conditions = Rswift.ImageResource(bundle: R.hostingBundle, name: "terms_conditions")
    /// Image `termscond`.
    static let termscond = Rswift.ImageResource(bundle: R.hostingBundle, name: "termscond")
    /// Image `unfav`.
    static let unfav = Rswift.ImageResource(bundle: R.hostingBundle, name: "unfav")
    /// Image `unlike`.
    static let unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlike")
    /// Image `uparrow`.
    static let uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "uparrow")
    /// Image `user_active`.
    static let user_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_active")
    /// Image `user_chooseimg`.
    static let user_chooseimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_chooseimg")
    /// Image `visa`.
    static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa")
    /// Image `wallet_ic`.
    static let wallet_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_ic")
    /// Image `wallet_setting`.
    static let wallet_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_setting")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `welcome_back`.
    static let welcome_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_back")
    /// Image `welcome_ic`.
    static let welcome_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_ic")
    /// Image `wepay`.
    static let wepay = Rswift.ImageResource(bundle: R.hostingBundle, name: "wepay")
    /// Image `white_logo`.
    static let white_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chat24", bundle: ..., traitCollection: ...)`
    static func chat24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClientImage", bundle: ..., traitCollection: ...)`
    static func clientImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clientImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClientNew", bundle: ..., traitCollection: ...)`
    static func clientNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clientNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Earning24", bundle: ..., traitCollection: ...)`
    static func earning24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.earning24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Edit24", bundle: ..., traitCollection: ...)`
    static func edit24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 995", bundle: ..., traitCollection: ...)`
    static func ellipse995(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse995, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FindDark", bundle: ..., traitCollection: ...)`
    static func findDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 11544", bundle: ..., traitCollection: ...)`
    static func group11544(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group11544, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 11545", bundle: ..., traitCollection: ...)`
    static func group11545(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group11545, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 11546", bundle: ..., traitCollection: ...)`
    static func group11546(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group11546, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HidePassword", bundle: ..., traitCollection: ...)`
    static func hidePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hidePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home24", bundle: ..., traitCollection: ...)`
    static func home24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Notification30", bundle: ..., traitCollection: ...)`
    static func notification30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Order24", bundle: ..., traitCollection: ...)`
    static func order24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plus24", bundle: ..., traitCollection: ...)`
    static func plus24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProviderNew", bundle: ..., traitCollection: ...)`
    static func providerNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.providerNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4861", bundle: ..., traitCollection: ...)`
    static func rectangle4861(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4861, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleChecked", bundle: ..., traitCollection: ...)`
    static func rectangleChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheck", bundle: ..., traitCollection: ...)`
    static func rectangleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SHLY (3) 1", bundle: ..., traitCollection: ...)`
    static func shly31(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shly31, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ServiceProvider", bundle: ..., traitCollection: ...)`
    static func serviceProvider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceProvider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Setting24", bundle: ..., traitCollection: ...)`
    static func setting24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShowPassword", bundle: ..., traitCollection: ...)`
    static func showPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showPassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide1", bundle: ..., traitCollection: ...)`
    static func slide1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide2", bundle: ..., traitCollection: ...)`
    static func slide2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide3", bundle: ..., traitCollection: ...)`
    static func slide3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide4", bundle: ..., traitCollection: ...)`
    static func slide4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star18", bundle: ..., traitCollection: ...)`
    static func star18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Start 14", bundle: ..., traitCollection: ...)`
    static func start14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account", bundle: ..., traitCollection: ...)`
    static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "americanexpress", bundle: ..., traitCollection: ...)`
    static func americanexpress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.americanexpress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_icon", bundle: ..., traitCollection: ...)`
    static func app_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "badge", bundle: ..., traitCollection: ...)`
    static func badge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.badge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bannerimg", bundle: ..., traitCollection: ...)`
    static func bannerimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bannerimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barber", bundle: ..., traitCollection: ...)`
    static func barber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barber, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barberback", bundle: ..., traitCollection: ...)`
    static func barberback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barberback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barbermarker", bundle: ..., traitCollection: ...)`
    static func barbermarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barbermarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barberstore", bundle: ..., traitCollection: ...)`
    static func barberstore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barberstore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_back", bundle: ..., traitCollection: ...)`
    static func black_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking_active", bundle: ..., traitCollection: ...)`
    static func booking_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking_back", bundle: ..., traitCollection: ...)`
    static func booking_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking_deactive", bundle: ..., traitCollection: ...)`
    static func booking_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookinglist_back", bundle: ..., traitCollection: ...)`
    static func bookinglist_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookinglist_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancelRed", bundle: ..., traitCollection: ...)`
    static func cancelRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat_clean", bundle: ..., traitCollection: ...)`
    static func cat_clean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_clean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "catic", bundle: ..., traitCollection: ...)`
    static func catic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_active", bundle: ..., traitCollection: ...)`
    static func chat_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_deactive", bundle: ..., traitCollection: ...)`
    static func chat_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkcircle", bundle: ..., traitCollection: ...)`
    static func checkcircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkcircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cleaning", bundle: ..., traitCollection: ...)`
    static func cleaning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cleaning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cong", bundle: ..., traitCollection: ...)`
    static func cong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactus", bundle: ..., traitCollection: ...)`
    static func contactus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customer", bundle: ..., traitCollection: ...)`
    static func customer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cutzsplashback", bundle: ..., traitCollection: ...)`
    static func cutzsplashback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cutzsplashback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cycling", bundle: ..., traitCollection: ...)`
    static func cycling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cycling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dateic", bundle: ..., traitCollection: ...)`
    static func dateic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dateic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ddddddd", bundle: ..., traitCollection: ...)`
    static func ddddddd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ddddddd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_ic", bundle: ..., traitCollection: ...)`
    static func delete_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downarrow", bundle: ..., traitCollection: ...)`
    static func downarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer_icon", bundle: ..., traitCollection: ...)`
    static func drawer_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummy_user", bundle: ..., traitCollection: ...)`
    static func dummy_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "earning_active", bundle: ..., traitCollection: ...)`
    static func earning_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.earning_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "earning_deactive", bundle: ..., traitCollection: ...)`
    static func earning_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.earning_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_new", bundle: ..., traitCollection: ...)`
    static func edit_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav", bundle: ..., traitCollection: ...)`
    static func fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_active", bundle: ..., traitCollection: ...)`
    static func fav_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_deactive", bundle: ..., traitCollection: ...)`
    static func fav_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_active", bundle: ..., traitCollection: ...)`
    static func feed_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_deactive", bundle: ..., traitCollection: ...)`
    static func feed_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedback", bundle: ..., traitCollection: ...)`
    static func feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_ic", bundle: ..., traitCollection: ...)`
    static func filter_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_active", bundle: ..., traitCollection: ...)`
    static func findbuddy_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_deactive", bundle: ..., traitCollection: ...)`
    static func findbuddy_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_active", bundle: ..., traitCollection: ...)`
    static func fitmarket_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_deactive", bundle: ..., traitCollection: ...)`
    static func fitmarket_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gall_im1", bundle: ..., traitCollection: ...)`
    static func gall_im1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gall_im1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gallaryimg", bundle: ..., traitCollection: ...)`
    static func gallaryimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gallaryimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greychat", bundle: ..., traitCollection: ...)`
    static func greychat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greychat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hairdie", bundle: ..., traitCollection: ...)`
    static func hairdie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hairdie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hairdresser", bundle: ..., traitCollection: ...)`
    static func hairdresser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hairdresser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head", bundle: ..., traitCollection: ...)`
    static func head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_dislike", bundle: ..., traitCollection: ...)`
    static func heart_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_dislike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_like", bundle: ..., traitCollection: ...)`
    static func heart_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpandsupport", bundle: ..., traitCollection: ...)`
    static func helpandsupport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpandsupport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history_deactive", bundle: ..., traitCollection: ...)`
    static func history_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_active", bundle: ..., traitCollection: ...)`
    static func home_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_deactive", bundle: ..., traitCollection: ...)`
    static func home_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeback", bundle: ..., traitCollection: ...)`
    static func homeback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "house", bundle: ..., traitCollection: ...)`
    static func house(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.house, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_CheckedCircle_Black", bundle: ..., traitCollection: ...)`
    static func ic_CheckedCircle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_CheckedCircle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Circle_Black", bundle: ..., traitCollection: ...)`
    static func ic_Circle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Circle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconoir_cancel", bundle: ..., traitCollection: ...)`
    static func iconoir_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconoir_cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invvite", bundle: ..., traitCollection: ...)`
    static func invvite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invvite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "itemimage", bundle: ..., traitCollection: ...)`
    static func itemimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.itemimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "journal_activity", bundle: ..., traitCollection: ...)`
    static func journal_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.journal_activity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "last_trans", bundle: ..., traitCollection: ...)`
    static func last_trans(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.last_trans, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_active", bundle: ..., traitCollection: ...)`
    static func location_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationic", bundle: ..., traitCollection: ...)`
    static func locationic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loclogo", bundle: ..., traitCollection: ...)`
    static func loclogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loclogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo 1", bundle: ..., traitCollection: ...)`
    static func logo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_new", bundle: ..., traitCollection: ...)`
    static func logo_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard", bundle: ..., traitCollection: ...)`
    static func mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "members", bundle: ..., traitCollection: ...)`
    static func members(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.members, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_horizontal", bundle: ..., traitCollection: ...)`
    static func menu_horizontal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_horizontal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_vertical", bundle: ..., traitCollection: ...)`
    static func menu_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_vertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfav", bundle: ..., traitCollection: ...)`
    static func myfav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfeed", bundle: ..., traitCollection: ...)`
    static func myfeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfeed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mypost", bundle: ..., traitCollection: ...)`
    static func mypost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mypost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "near_barber", bundle: ..., traitCollection: ...)`
    static func near_barber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.near_barber, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nearbuddy", bundle: ..., traitCollection: ...)`
    static func nearbuddy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearbuddy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nearme", bundle: ..., traitCollection: ...)`
    static func nearme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "padlock", bundle: ..., traitCollection: ...)`
    static func padlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.padlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
    static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_2", bundle: ..., traitCollection: ...)`
    static func placeholder_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus1", bundle: ..., traitCollection: ...)`
    static func plus1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_active", bundle: ..., traitCollection: ...)`
    static func plus_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_deactive", bundle: ..., traitCollection: ...)`
    static func plus_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_only", bundle: ..., traitCollection: ...)`
    static func plus_only(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_only, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_img", bundle: ..., traitCollection: ...)`
    static func post_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy", bundle: ..., traitCollection: ...)`
    static func privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy_policy", bundle: ..., traitCollection: ...)`
    static func privacy_policy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy_policy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_active", bundle: ..., traitCollection: ...)`
    static func profile_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_deactive", bundle: ..., traitCollection: ...)`
    static func profile_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profiledeactive", bundle: ..., traitCollection: ...)`
    static func profiledeactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profiledeactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "provider", bundle: ..., traitCollection: ...)`
    static func provider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.provider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "provider_choose_img", bundle: ..., traitCollection: ...)`
    static func provider_choose_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.provider_choose_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "provider_img", bundle: ..., traitCollection: ...)`
    static func provider_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.provider_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "referfriend", bundle: ..., traitCollection: ...)`
    static func referfriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.referfriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reviews-outline", bundle: ..., traitCollection: ...)`
    static func reviewsOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviewsOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "round_logo", bundle: ..., traitCollection: ...)`
    static func round_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "salonmarker", bundle: ..., traitCollection: ...)`
    static func salonmarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.salonmarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saloon_2", bundle: ..., traitCollection: ...)`
    static func saloon_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saloon_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saloon_img", bundle: ..., traitCollection: ...)`
    static func saloon_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saloon_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saloonback", bundle: ..., traitCollection: ...)`
    static func saloonback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saloonback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saving", bundle: ..., traitCollection: ...)`
    static func saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saving, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectitem", bundle: ..., traitCollection: ...)`
    static func selectitem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectitem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendmessage", bundle: ..., traitCollection: ...)`
    static func sendmessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendmessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service_active", bundle: ..., traitCollection: ...)`
    static func service_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.service_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service_deactive", bundle: ..., traitCollection: ...)`
    static func service_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.service_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "serviceimg", bundle: ..., traitCollection: ...)`
    static func serviceimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "servicelist", bundle: ..., traitCollection: ...)`
    static func servicelist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.servicelist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_active", bundle: ..., traitCollection: ...)`
    static func setting_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_deactive", bundle: ..., traitCollection: ...)`
    static func setting_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_deactive", bundle: ..., traitCollection: ...)`
    static func settings_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shampoo", bundle: ..., traitCollection: ...)`
    static func shampoo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shampoo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharefriend", bundle: ..., traitCollection: ...)`
    static func sharefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1", bundle: ..., traitCollection: ...)`
    static func slide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_2", bundle: ..., traitCollection: ...)`
    static func slide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_3", bundle: ..., traitCollection: ...)`
    static func slide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_4", bundle: ..., traitCollection: ...)`
    static func slide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscribe", bundle: ..., traitCollection: ...)`
    static func subscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscribe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscription", bundle: ..., traitCollection: ...)`
    static func subscription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscription, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "terms_conditions", bundle: ..., traitCollection: ...)`
    static func terms_conditions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.terms_conditions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "termscond", bundle: ..., traitCollection: ...)`
    static func termscond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termscond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unfav", bundle: ..., traitCollection: ...)`
    static func unfav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unfav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlike", bundle: ..., traitCollection: ...)`
    static func unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uparrow", bundle: ..., traitCollection: ...)`
    static func uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_active", bundle: ..., traitCollection: ...)`
    static func user_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_chooseimg", bundle: ..., traitCollection: ...)`
    static func user_chooseimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_chooseimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
    static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_ic", bundle: ..., traitCollection: ...)`
    static func wallet_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_setting", bundle: ..., traitCollection: ...)`
    static func wallet_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome_back", bundle: ..., traitCollection: ...)`
    static func welcome_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome_ic", bundle: ..., traitCollection: ...)`
    static func welcome_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wepay", bundle: ..., traitCollection: ...)`
    static func wepay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wepay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "white_logo", bundle: ..., traitCollection: ...)`
    static func white_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_logo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 26 nibs.
  struct nib {
    /// Nib `AcceptedCell`.
    static let acceptedCell = _R.nib._AcceptedCell()
    /// Nib `AddressCell`.
    static let addressCell = _R.nib._AddressCell()
    /// Nib `CardCell`.
    static let cardCell = _R.nib._CardCell()
    /// Nib `ChatsCell`.
    static let chatsCell = _R.nib._ChatsCell()
    /// Nib `CompleteCell`.
    static let completeCell = _R.nib._CompleteCell()
    /// Nib `ContServiceCell`.
    static let contServiceCell = _R.nib._ContServiceCell()
    /// Nib `GallaryCell`.
    static let gallaryCell = _R.nib._GallaryCell()
    /// Nib `ImageCell`.
    static let imageCell = _R.nib._ImageCell()
    /// Nib `LeftCell`.
    static let leftCell = _R.nib._LeftCell()
    /// Nib `MyServiceCell`.
    static let myServiceCell = _R.nib._MyServiceCell()
    /// Nib `NewServiceCell`.
    static let newServiceCell = _R.nib._NewServiceCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `PendingCell`.
    static let pendingCell = _R.nib._PendingCell()
    /// Nib `ProChooseTimeCell`.
    static let proChooseTimeCell = _R.nib._ProChooseTimeCell()
    /// Nib `ProviderAcceptedCell`.
    static let providerAcceptedCell = _R.nib._ProviderAcceptedCell()
    /// Nib `ProviderCompletedCell`.
    static let providerCompletedCell = _R.nib._ProviderCompletedCell()
    /// Nib `ProviderEarningCell`.
    static let providerEarningCell = _R.nib._ProviderEarningCell()
    /// Nib `ProviderNewReqCell`.
    static let providerNewReqCell = _R.nib._ProviderNewReqCell()
    /// Nib `ProviderTimeSlotCell`.
    static let providerTimeSlotCell = _R.nib._ProviderTimeSlotCell()
    /// Nib `ReviewCell`.
    static let reviewCell = _R.nib._ReviewCell()
    /// Nib `RightCell`.
    static let rightCell = _R.nib._RightCell()
    /// Nib `SearchResultCell`.
    static let searchResultCell = _R.nib._SearchResultCell()
    /// Nib `ServiceCell`.
    static let serviceCell = _R.nib._ServiceCell()
    /// Nib `SubCategoryCell`.
    static let subCategoryCell = _R.nib._SubCategoryCell()
    /// Nib `TimeSlotCell`.
    static let timeSlotCell = _R.nib._TimeSlotCell()
    /// Nib `TypeCell`.
    static let typeCell = _R.nib._TypeCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AcceptedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.acceptedCell) instead")
    static func acceptedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.acceptedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressCell) instead")
    static func addressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cardCell) instead")
    static func cardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatsCell) instead")
    static func chatsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CompleteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.completeCell) instead")
    static func completeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.completeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ContServiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contServiceCell) instead")
    static func contServiceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contServiceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GallaryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gallaryCell) instead")
    static func gallaryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gallaryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageCell) instead")
    static func imageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LeftCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.leftCell) instead")
    static func leftCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyServiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myServiceCell) instead")
    static func myServiceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myServiceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewServiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newServiceCell) instead")
    static func newServiceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newServiceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PendingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pendingCell) instead")
    static func pendingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pendingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProChooseTimeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.proChooseTimeCell) instead")
    static func proChooseTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.proChooseTimeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderAcceptedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerAcceptedCell) instead")
    static func providerAcceptedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerAcceptedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderCompletedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerCompletedCell) instead")
    static func providerCompletedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerCompletedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderEarningCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerEarningCell) instead")
    static func providerEarningCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerEarningCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderNewReqCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerNewReqCell) instead")
    static func providerNewReqCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerNewReqCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderTimeSlotCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerTimeSlotCell) instead")
    static func providerTimeSlotCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerTimeSlotCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reviewCell) instead")
    static func reviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RightCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rightCell) instead")
    static func rightCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rightCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchResultCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchResultCell) instead")
    static func searchResultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ServiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.serviceCell) instead")
    static func serviceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serviceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subCategoryCell) instead")
    static func subCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subCategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimeSlotCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timeSlotCell) instead")
    static func timeSlotCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeSlotCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.typeCell) instead")
    static func typeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.typeCell)
    }
    #endif

    static func acceptedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AcceptedCell? {
      return R.nib.acceptedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AcceptedCell
    }

    static func addressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressCell? {
      return R.nib.addressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressCell
    }

    static func cardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardCell? {
      return R.nib.cardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardCell
    }

    static func chatsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatsCell? {
      return R.nib.chatsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatsCell
    }

    static func completeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CompleteCell? {
      return R.nib.completeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CompleteCell
    }

    static func contServiceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContServiceCell? {
      return R.nib.contServiceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContServiceCell
    }

    static func gallaryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GallaryCell? {
      return R.nib.gallaryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GallaryCell
    }

    static func imageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCell? {
      return R.nib.imageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCell
    }

    static func leftCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftCell? {
      return R.nib.leftCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftCell
    }

    static func myServiceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyServiceCell? {
      return R.nib.myServiceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyServiceCell
    }

    static func newServiceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewServiceCell? {
      return R.nib.newServiceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewServiceCell
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func pendingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PendingCell? {
      return R.nib.pendingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PendingCell
    }

    static func proChooseTimeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProChooseTimeCell? {
      return R.nib.proChooseTimeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProChooseTimeCell
    }

    static func providerAcceptedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderAcceptedCell? {
      return R.nib.providerAcceptedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderAcceptedCell
    }

    static func providerCompletedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCompletedCell? {
      return R.nib.providerCompletedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCompletedCell
    }

    static func providerEarningCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderEarningCell? {
      return R.nib.providerEarningCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderEarningCell
    }

    static func providerNewReqCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderNewReqCell? {
      return R.nib.providerNewReqCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderNewReqCell
    }

    static func providerTimeSlotCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderTimeSlotCell? {
      return R.nib.providerTimeSlotCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderTimeSlotCell
    }

    static func reviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewCell? {
      return R.nib.reviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewCell
    }

    static func rightCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RightCell? {
      return R.nib.rightCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightCell
    }

    static func searchResultCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultCell? {
      return R.nib.searchResultCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultCell
    }

    static func serviceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCell? {
      return R.nib.serviceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCell
    }

    static func subCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryCell? {
      return R.nib.subCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryCell
    }

    static func timeSlotCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimeSlotCell? {
      return R.nib.timeSlotCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeSlotCell
    }

    static func typeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TypeCell? {
      return R.nib.typeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TypeCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 26 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AcceptedCell`.
    static let acceptedCell: Rswift.ReuseIdentifier<AcceptedCell> = Rswift.ReuseIdentifier(identifier: "AcceptedCell")
    /// Reuse identifier `CardCell`.
    static let cardCell: Rswift.ReuseIdentifier<CardCell> = Rswift.ReuseIdentifier(identifier: "CardCell")
    /// Reuse identifier `ChatsCell`.
    static let chatsCell: Rswift.ReuseIdentifier<ChatsCell> = Rswift.ReuseIdentifier(identifier: "ChatsCell")
    /// Reuse identifier `CompleteCell`.
    static let completeCell: Rswift.ReuseIdentifier<CompleteCell> = Rswift.ReuseIdentifier(identifier: "CompleteCell")
    /// Reuse identifier `ContServiceCell`.
    static let contServiceCell: Rswift.ReuseIdentifier<ContServiceCell> = Rswift.ReuseIdentifier(identifier: "ContServiceCell")
    /// Reuse identifier `GallaryCell`.
    static let gallaryCell: Rswift.ReuseIdentifier<GallaryCell> = Rswift.ReuseIdentifier(identifier: "GallaryCell")
    /// Reuse identifier `ImageCell`.
    static let imageCell: Rswift.ReuseIdentifier<ImageCell> = Rswift.ReuseIdentifier(identifier: "ImageCell")
    /// Reuse identifier `LeftCell`.
    static let leftCell: Rswift.ReuseIdentifier<LeftCell> = Rswift.ReuseIdentifier(identifier: "LeftCell")
    /// Reuse identifier `MyServiceCell`.
    static let myServiceCell: Rswift.ReuseIdentifier<MyServiceCell> = Rswift.ReuseIdentifier(identifier: "MyServiceCell")
    /// Reuse identifier `NewServiceCell`.
    static let newServiceCell: Rswift.ReuseIdentifier<NewServiceCell> = Rswift.ReuseIdentifier(identifier: "NewServiceCell")
    /// Reuse identifier `PendingCell`.
    static let pendingCell: Rswift.ReuseIdentifier<PendingCell> = Rswift.ReuseIdentifier(identifier: "PendingCell")
    /// Reuse identifier `ProChooseTimeCell`.
    static let proChooseTimeCell: Rswift.ReuseIdentifier<ProChooseTimeCell> = Rswift.ReuseIdentifier(identifier: "ProChooseTimeCell")
    /// Reuse identifier `ProviderAcceptedCell`.
    static let providerAcceptedCell: Rswift.ReuseIdentifier<ProviderAcceptedCell> = Rswift.ReuseIdentifier(identifier: "ProviderAcceptedCell")
    /// Reuse identifier `ProviderCompletedCell`.
    static let providerCompletedCell: Rswift.ReuseIdentifier<ProviderCompletedCell> = Rswift.ReuseIdentifier(identifier: "ProviderCompletedCell")
    /// Reuse identifier `ProviderEarningCell`.
    static let providerEarningCell: Rswift.ReuseIdentifier<ProviderEarningCell> = Rswift.ReuseIdentifier(identifier: "ProviderEarningCell")
    /// Reuse identifier `ProviderNewReqCell`.
    static let providerNewReqCell: Rswift.ReuseIdentifier<ProviderNewReqCell> = Rswift.ReuseIdentifier(identifier: "ProviderNewReqCell")
    /// Reuse identifier `ProviderTimeSlotCell`.
    static let providerTimeSlotCell: Rswift.ReuseIdentifier<ProviderTimeSlotCell> = Rswift.ReuseIdentifier(identifier: "ProviderTimeSlotCell")
    /// Reuse identifier `ReviewCell`.
    static let reviewCell: Rswift.ReuseIdentifier<ReviewCell> = Rswift.ReuseIdentifier(identifier: "ReviewCell")
    /// Reuse identifier `RightCell`.
    static let rightCell: Rswift.ReuseIdentifier<RightCell> = Rswift.ReuseIdentifier(identifier: "RightCell")
    /// Reuse identifier `SearchResultCell`.
    static let searchResultCell: Rswift.ReuseIdentifier<SearchResultCell> = Rswift.ReuseIdentifier(identifier: "SearchResultCell")
    /// Reuse identifier `ServiceCell`.
    static let serviceCell: Rswift.ReuseIdentifier<ServiceCell> = Rswift.ReuseIdentifier(identifier: "ServiceCell")
    /// Reuse identifier `SubCategoryCell`.
    static let subCategoryCell: Rswift.ReuseIdentifier<SubCategoryCell> = Rswift.ReuseIdentifier(identifier: "SubCategoryCell")
    /// Reuse identifier `TimeSlotCell`.
    static let timeSlotCell: Rswift.ReuseIdentifier<TimeSlotCell> = Rswift.ReuseIdentifier(identifier: "TimeSlotCell")
    /// Reuse identifier `TypeCell`.
    static let typeCell: Rswift.ReuseIdentifier<TypeCell> = Rswift.ReuseIdentifier(identifier: "TypeCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<PhotoCell> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `searchLocationCell`.
    static let searchLocationCell: Rswift.ReuseIdentifier<SearchLocationCell> = Rswift.ReuseIdentifier(identifier: "searchLocationCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 12 localization tables.
  struct string {
    /// This `R.string.acceptedCell` struct is generated, and contains static references to 9 localization keys.
    struct acceptedCell {
      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static let vfZL0e6Text = Rswift.StringResource(key: "4vf-zL-0e6.text", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static let qzz6qH9CText = Rswift.StringResource(key: "Qzz-6q-h9C.text", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let utmCa8tmNormalTitle = Rswift.StringResource(key: "UTM-ca-8tm.normalTitle", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: en, fr
      static let gh3HLD7PNormalTitle = Rswift.StringResource(key: "GH3-hL-d7P.normalTitle", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Complété
      ///
      /// Locales: en, fr
      static let uKeOZcNormalTitle = Rswift.StringResource(key: "82u-ke-oZc.normalTitle", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: en, fr
      static let jdMO7CaVNormalTitle = Rswift.StringResource(key: "JdM-O7-CaV.normalTitle", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let vylRuNbnText = Rswift.StringResource(key: "Vyl-ru-nbn.text", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static let bw84DIyText = Rswift.StringResource(key: "1Bw-84-DIy.text", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static let hjnKaRbeText = Rswift.StringResource(key: "hjn-Ka-rbe.text", tableName: "AcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static func vfZL0e6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4vf-zL-0e6.text", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "4vf-zL-0e6.text"
        }

        return NSLocalizedString("4vf-zL-0e6.text", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static func qzz6qH9CText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qzz-6q-h9C.text", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "Qzz-6q-h9C.text"
        }

        return NSLocalizedString("Qzz-6q-h9C.text", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func utmCa8tmNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UTM-ca-8tm.normalTitle", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "UTM-ca-8tm.normalTitle"
        }

        return NSLocalizedString("UTM-ca-8tm.normalTitle", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: en, fr
      static func gh3HLD7PNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GH3-hL-d7P.normalTitle", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "GH3-hL-d7P.normalTitle"
        }

        return NSLocalizedString("GH3-hL-d7P.normalTitle", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Complété
      ///
      /// Locales: en, fr
      static func uKeOZcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("82u-ke-oZc.normalTitle", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "82u-ke-oZc.normalTitle"
        }

        return NSLocalizedString("82u-ke-oZc.normalTitle", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: en, fr
      static func jdMO7CaVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JdM-O7-CaV.normalTitle", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "JdM-O7-CaV.normalTitle"
        }

        return NSLocalizedString("JdM-O7-CaV.normalTitle", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func vylRuNbnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vyl-ru-nbn.text", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "Vyl-ru-nbn.text"
        }

        return NSLocalizedString("Vyl-ru-nbn.text", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static func bw84DIyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1Bw-84-DIy.text", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "1Bw-84-DIy.text"
        }

        return NSLocalizedString("1Bw-84-DIy.text", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static func hjnKaRbeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hjn-Ka-rbe.text", tableName: "AcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AcceptedCell", preferredLanguages: preferredLanguages) else {
          return "hjn-Ka-rbe.text"
        }

        return NSLocalizedString("hjn-Ka-rbe.text", tableName: "AcceptedCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.addressCell` struct is generated, and contains static references to 3 localization keys.
    struct addressCell {
      /// en translation: Choose
      ///
      /// Locales: en, fr
      static let xDbH5XNNNormalTitle = Rswift.StringResource(key: "xDb-h5-xNN.normalTitle", tableName: "AddressCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, fr
      static let qs7Z8SlKText = Rswift.StringResource(key: "qs7-Z8-SlK.text", tableName: "AddressCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Sai Ram Plaza, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let jItOzLo2Text = Rswift.StringResource(key: "jIt-oz-lo2.text", tableName: "AddressCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: Choose
      ///
      /// Locales: en, fr
      static func xDbH5XNNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xDb-h5-xNN.normalTitle", tableName: "AddressCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AddressCell", preferredLanguages: preferredLanguages) else {
          return "xDb-h5-xNN.normalTitle"
        }

        return NSLocalizedString("xDb-h5-xNN.normalTitle", tableName: "AddressCell", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, fr
      static func qs7Z8SlKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qs7-Z8-SlK.text", tableName: "AddressCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AddressCell", preferredLanguages: preferredLanguages) else {
          return "qs7-Z8-SlK.text"
        }

        return NSLocalizedString("qs7-Z8-SlK.text", tableName: "AddressCell", bundle: bundle, comment: "")
      }

      /// en translation: Sai Ram Plaza, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func jItOzLo2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jIt-oz-lo2.text", tableName: "AddressCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AddressCell", preferredLanguages: preferredLanguages) else {
          return "jIt-oz-lo2.text"
        }

        return NSLocalizedString("jIt-oz-lo2.text", tableName: "AddressCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.cardCell` struct is generated, and contains static references to 3 localization keys.
    struct cardCell {
      /// en translation: Choose
      ///
      /// Locales: en, fr
      static let yJEG8Nv3NormalTitle = Rswift.StringResource(key: "yJE-G8-nv3.normalTitle", tableName: "CardCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, fr
      static let il0eNAHNormalTitle = Rswift.StringResource(key: "1il-0e-NAH.normalTitle", tableName: "CardCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Visa **** **** **** 4242 
      ///
      /// Locales: en, fr
      static let gObV5PORText = Rswift.StringResource(key: "GOb-V5-pOR.text", tableName: "CardCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: Choose
      ///
      /// Locales: en, fr
      static func yJEG8Nv3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yJE-G8-nv3.normalTitle", tableName: "CardCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CardCell", preferredLanguages: preferredLanguages) else {
          return "yJE-G8-nv3.normalTitle"
        }

        return NSLocalizedString("yJE-G8-nv3.normalTitle", tableName: "CardCell", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, fr
      static func il0eNAHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1il-0e-NAH.normalTitle", tableName: "CardCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CardCell", preferredLanguages: preferredLanguages) else {
          return "1il-0e-NAH.normalTitle"
        }

        return NSLocalizedString("1il-0e-NAH.normalTitle", tableName: "CardCell", bundle: bundle, comment: "")
      }

      /// en translation: Visa **** **** **** 4242 
      ///
      /// Locales: en, fr
      static func gObV5PORText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GOb-V5-pOR.text", tableName: "CardCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CardCell", preferredLanguages: preferredLanguages) else {
          return "GOb-V5-pOR.text"
        }

        return NSLocalizedString("GOb-V5-pOR.text", tableName: "CardCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.completeCell` struct is generated, and contains static references to 7 localization keys.
    struct completeCell {
      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static let mmsCVYdnText = Rswift.StringResource(key: "Mms-cV-ydn.text", tableName: "CompleteCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static let dQUVDWf2Text = Rswift.StringResource(key: "dQU-VD-wf2.text", tableName: "CompleteCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, fr
      static let dhk0eWElNormalTitle = Rswift.StringResource(key: "dhk-0e-wEl.normalTitle", tableName: "CompleteCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: en, fr
      static let bW6aDNiNormalTitle = Rswift.StringResource(key: "6bW-6a-DNi.normalTitle", tableName: "CompleteCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let hn6JhW5zText = Rswift.StringResource(key: "HN6-jh-W5z.text", tableName: "CompleteCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static let cyqQIBEPText = Rswift.StringResource(key: "cyq-qI-bEP.text", tableName: "CompleteCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static let oHZ474Text = Rswift.StringResource(key: "49o-hZ-474.text", tableName: "CompleteCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static func mmsCVYdnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mms-cV-ydn.text", tableName: "CompleteCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CompleteCell", preferredLanguages: preferredLanguages) else {
          return "Mms-cV-ydn.text"
        }

        return NSLocalizedString("Mms-cV-ydn.text", tableName: "CompleteCell", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static func dQUVDWf2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dQU-VD-wf2.text", tableName: "CompleteCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CompleteCell", preferredLanguages: preferredLanguages) else {
          return "dQU-VD-wf2.text"
        }

        return NSLocalizedString("dQU-VD-wf2.text", tableName: "CompleteCell", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, fr
      static func dhk0eWElNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dhk-0e-wEl.normalTitle", tableName: "CompleteCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CompleteCell", preferredLanguages: preferredLanguages) else {
          return "dhk-0e-wEl.normalTitle"
        }

        return NSLocalizedString("dhk-0e-wEl.normalTitle", tableName: "CompleteCell", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: en, fr
      static func bW6aDNiNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6bW-6a-DNi.normalTitle", tableName: "CompleteCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CompleteCell", preferredLanguages: preferredLanguages) else {
          return "6bW-6a-DNi.normalTitle"
        }

        return NSLocalizedString("6bW-6a-DNi.normalTitle", tableName: "CompleteCell", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func hn6JhW5zText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HN6-jh-W5z.text", tableName: "CompleteCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CompleteCell", preferredLanguages: preferredLanguages) else {
          return "HN6-jh-W5z.text"
        }

        return NSLocalizedString("HN6-jh-W5z.text", tableName: "CompleteCell", bundle: bundle, comment: "")
      }

      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static func cyqQIBEPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cyq-qI-bEP.text", tableName: "CompleteCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CompleteCell", preferredLanguages: preferredLanguages) else {
          return "cyq-qI-bEP.text"
        }

        return NSLocalizedString("cyq-qI-bEP.text", tableName: "CompleteCell", bundle: bundle, comment: "")
      }

      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static func oHZ474Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("49o-hZ-474.text", tableName: "CompleteCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CompleteCell", preferredLanguages: preferredLanguages) else {
          return "49o-hZ-474.text"
        }

        return NSLocalizedString("49o-hZ-474.text", tableName: "CompleteCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 126 localization keys.
    struct localizable {
      /// en translation: Accept
      ///
      /// Locales: en, fr
      static let accept = Rswift.StringResource(key: "Accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static let accepted = Rswift.StringResource(key: "Accepted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add Card
      ///
      /// Locales: en, fr
      static let addCard = Rswift.StringResource(key: "Add Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add Provider image
      ///
      /// Locales: en, fr
      static let addProviderImage = Rswift.StringResource(key: "Add Provider image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add Service
      ///
      /// Locales: en, fr
      static let addService = Rswift.StringResource(key: "Add Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add provider Cover Image
      ///
      /// Locales: en, fr
      static let addProviderCoverImage = Rswift.StringResource(key: "Add provider Cover Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add your Provider details
      ///
      /// Locales: en, fr
      static let addYourProviderDetails = Rswift.StringResource(key: "Add your Provider details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Address Deleted Successfully
      ///
      /// Locales: en, fr
      static let addressDeletedSuccessfully = Rswift.StringResource(key: "Address Deleted Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Address added successfully
      ///
      /// Locales: en, fr
      static let addressAddedSuccessfully = Rswift.StringResource(key: "Address added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Already one withdraw request sent
      ///
      /// Locales: en, fr
      static let alreadyOneWithdrawRequestSent = Rswift.StringResource(key: "Already one withdraw request sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Are you sure to delete this image
      ///
      /// Locales: en, fr
      static let areYouSureToDeleteThisImage = Rswift.StringResource(key: "Are you sure to delete this image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Booking Request
      ///
      /// Locales: en, fr
      static let bookingRequest = Rswift.StringResource(key: "Booking Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Booking completed successfullly!
      ///
      /// Locales: en, fr
      static let bookingCompletedSuccessfullly = Rswift.StringResource(key: "Booking completed successfullly!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Booking has been cancelled successfully!
      ///
      /// Locales: en, fr
      static let bookingHasBeenCancelledSuccessfully = Rswift.StringResource(key: "Booking has been cancelled successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab
      ///
      /// Locales: en, fr
      static let bookingSentSuccessfullyPleaseWaitForProviderConfirmationYouCanSeeBookingStatusInMyOrdersTab = Rswift.StringResource(key: "Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: CUSTOMER
      ///
      /// Locales: en, fr
      static let customeR = Rswift.StringResource(key: "CUSTOMER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, fr
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Card Is Incomplete!
      ///
      /// Locales: en, fr
      static let cardIsIncomplete = Rswift.StringResource(key: "Card Is Incomplete!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Card Is Invalid!
      ///
      /// Locales: en, fr
      static let cardIsInvalid = Rswift.StringResource(key: "Card Is Invalid!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Card saved successfully!
      ///
      /// Locales: en, fr
      static let cardSavedSuccessfully = Rswift.StringResource(key: "Card saved successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, fr
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Choose Account Type
      ///
      /// Locales: en, fr
      static let chooseAccountType = Rswift.StringResource(key: "Choose Account Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Company
      ///
      /// Locales: en, fr
      static let company = Rswift.StringResource(key: "Company", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, fr
      static let completed = Rswift.StringResource(key: "Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Confirm Booking
      ///
      /// Locales: en, fr
      static let confirmBooking = Rswift.StringResource(key: "Confirm Booking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Congratulation Your account has been created successfully!
      ///
      /// Locales: en, fr
      static let congratulationYourAccountHasBeenCreatedSuccessfully = Rswift.StringResource(key: "Congratulation Your account has been created successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Contact
      ///
      /// Locales: en, fr
      static let contact = Rswift.StringResource(key: "Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Create New Account
      ///
      /// Locales: en, fr
      static let createNewAccount = Rswift.StringResource(key: "Create New Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: DATE
      ///
      /// Locales: en, fr
      static let datE = Rswift.StringResource(key: "DATE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, fr
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Deleted Successfully
      ///
      /// Locales: en, fr
      static let deletedSuccessfully = Rswift.StringResource(key: "Deleted Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: en, fr
      static let details = Rswift.StringResource(key: "Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, fr
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Earning
      ///
      /// Locales: en, fr
      static let earning = Rswift.StringResource(key: "Earning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, fr
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email Address Not Found
      ///
      /// Locales: en, fr
      static let emailAddressNotFound = Rswift.StringResource(key: "Email Address Not Found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, fr
      static let enter = Rswift.StringResource(key: "Enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: en, fr
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gallary
      ///
      /// Locales: en, fr
      static let gallary = Rswift.StringResource(key: "Gallary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, fr
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gallery photo added successfully
      ///
      /// Locales: en, fr
      static let galleryPhotoAddedSuccessfully = Rswift.StringResource(key: "Gallery photo added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, fr
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: I am the manager of a hair Provider and i want to add my Provider
      ///
      /// Locales: en, fr
      static let iAmTheManagerOfAHairProviderAndIWantToAddMyProvider = Rswift.StringResource(key: "I am the manager of a hair Provider and i want to add my Provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: I want to look good, i need to book
      ///
      /// Locales: en, fr
      static let iWantToLookGoodINeedToBook = Rswift.StringResource(key: "I want to look good, i need to book", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, fr
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: en, fr
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Location Not Found
      ///
      /// Locales: en, fr
      static let locationNotFound = Rswift.StringResource(key: "Location Not Found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Manage Home Service Fee
      ///
      /// Locales: en, fr
      static let manageHomeServiceFee = Rswift.StringResource(key: "Manage Home Service Fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Manage Profile
      ///
      /// Locales: en, fr
      static let manageProfile = Rswift.StringResource(key: "Manage Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: en, fr
      static let message = Rswift.StringResource(key: "Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: My Address
      ///
      /// Locales: en, fr
      static let myAddress = Rswift.StringResource(key: "My Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: My Bookings
      ///
      /// Locales: en, fr
      static let myBookings = Rswift.StringResource(key: "My Bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: My Service
      ///
      /// Locales: en, fr
      static let myService = Rswift.StringResource(key: "My Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New password has sent to your email!
      ///
      /// Locales: en, fr
      static let newPasswordHasSentToYourEmail = Rswift.StringResource(key: "New password has sent to your email!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, fr
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: No Internet Connection. Make sure your device is connected to the internet
      ///
      /// Locales: en, fr
      static let noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet = Rswift.StringResource(key: "No Internet Connection. Make sure your device is connected to the internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: No pending request found
      ///
      /// Locales: en, fr
      static let noPendingRequestFound = Rswift.StringResource(key: "No pending request found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en, fr
      static let notification = Rswift.StringResource(key: "Notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notify Arrived
      ///
      /// Locales: en, fr
      static let notifyArrived = Rswift.StringResource(key: "Notify Arrived", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notify Complete
      ///
      /// Locales: en, fr
      static let notifyComplete = Rswift.StringResource(key: "Notify Complete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notify On The Way
      ///
      /// Locales: en, fr
      static let notifyOnTheWay = Rswift.StringResource(key: "Notify On The Way", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notify Start
      ///
      /// Locales: en, fr
      static let notifyStart = Rswift.StringResource(key: "Notify Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, fr
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: PROVIDER
      ///
      /// Locales: en, fr
      static let provideR = Rswift.StringResource(key: "PROVIDER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Password changed successfully!
      ///
      /// Locales: en, fr
      static let passwordChangedSuccessfully = Rswift.StringResource(key: "Password changed successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Payment
      ///
      /// Locales: en, fr
      static let payment = Rswift.StringResource(key: "Payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: en, fr
      static let pending = Rswift.StringResource(key: "Pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please Confirm Password
      ///
      /// Locales: en, fr
      static let pleaseConfirmPassword = Rswift.StringResource(key: "Please Confirm Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please Enter message
      ///
      /// Locales: en, fr
      static let pleaseEnterMessage = Rswift.StringResource(key: "Please Enter message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please Enter the Password!
      ///
      /// Locales: en, fr
      static let pleaseEnterThePassword = Rswift.StringResource(key: "Please Enter the Password!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please Read the CGU For Proceed
      ///
      /// Locales: en, fr
      static let pleaseReadTheCGUForProceed = Rswift.StringResource(key: "Please Read the CGU For Proceed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please Read the CGV For Proceed
      ///
      /// Locales: en, fr
      static let pleaseReadTheCGVForProceed = Rswift.StringResource(key: "Please Read the CGV For Proceed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please Wait!!
      ///
      /// Locales: en, fr
      static let pleaseWait = Rswift.StringResource(key: "Please Wait!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enter the description
      ///
      /// Locales: en, fr
      static let pleaseEnterTheDescription = Rswift.StringResource(key: "Please enter the description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enter the feedback
      ///
      /// Locales: en, fr
      static let pleaseEnterTheFeedback = Rswift.StringResource(key: "Please enter the feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enter the price
      ///
      /// Locales: en, fr
      static let pleaseEnterThePrice = Rswift.StringResource(key: "Please enter the price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enter the reason
      ///
      /// Locales: en, fr
      static let pleaseEnterTheReason = Rswift.StringResource(key: "Please enter the reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enter the required details
      ///
      /// Locales: en, fr
      static let pleaseEnterTheRequiredDetails = Rswift.StringResource(key: "Please enter the required details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enter the title
      ///
      /// Locales: en, fr
      static let pleaseEnterTheTitle = Rswift.StringResource(key: "Please enter the title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enter the valid email
      ///
      /// Locales: en, fr
      static let pleaseEnterTheValidEmail = Rswift.StringResource(key: "Please enter the valid email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please select rating!
      ///
      /// Locales: en, fr
      static let pleaseSelectRating = Rswift.StringResource(key: "Please select rating!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please select the address
      ///
      /// Locales: en, fr
      static let pleaseSelectTheAddress = Rswift.StringResource(key: "Please select the address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please select the category
      ///
      /// Locales: en, fr
      static let pleaseSelectTheCategory = Rswift.StringResource(key: "Please select the category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please select the service
      ///
      /// Locales: en, fr
      static let pleaseSelectTheService = Rswift.StringResource(key: "Please select the service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please select the sub-category
      ///
      /// Locales: en, fr
      static let pleaseSelectTheSubCategory = Rswift.StringResource(key: "Please select the sub-category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please select the time slot
      ///
      /// Locales: en, fr
      static let pleaseSelectTheTimeSlot = Rswift.StringResource(key: "Please select the time slot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Profile updated successfully!
      ///
      /// Locales: en, fr
      static let profileUpdatedSuccessfully = Rswift.StringResource(key: "Profile updated successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Provider Name
      ///
      /// Locales: en, fr
      static let providerName = Rswift.StringResource(key: "Provider Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Rating submitted successfully
      ///
      /// Locales: en, fr
      static let ratingSubmittedSuccessfully = Rswift.StringResource(key: "Rating submitted successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Reason
      ///
      /// Locales: en, fr
      static let reason = Rswift.StringResource(key: "Reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Reject
      ///
      /// Locales: en, fr
      static let reject = Rswift.StringResource(key: "Reject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Request Details
      ///
      /// Locales: en, fr
      static let requestDetails = Rswift.StringResource(key: "Request Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Request added successfully
      ///
      /// Locales: en, fr
      static let requestAddedSuccessfully = Rswift.StringResource(key: "Request added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Required First Name
      ///
      /// Locales: en, fr
      static let requiredFirstName = Rswift.StringResource(key: "Required First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Required Last Name
      ///
      /// Locales: en, fr
      static let requiredLastName = Rswift.StringResource(key: "Required Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Reviews
      ///
      /// Locales: en, fr
      static let reviews = Rswift.StringResource(key: "Reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Saved Cards
      ///
      /// Locales: en, fr
      static let savedCards = Rswift.StringResource(key: "Saved Cards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Search Results
      ///
      /// Locales: en, fr
      static let searchResults = Rswift.StringResource(key: "Search Results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Provider open and close time
      ///
      /// Locales: en, fr
      static let selectProviderOpenAndCloseTime = Rswift.StringResource(key: "Select Provider open and close time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Sub Category
      ///
      /// Locales: en, fr
      static let selectSubCategory = Rswift.StringResource(key: "Select Sub Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service For :
      ///
      /// Locales: en, fr
      static let serviceFor = Rswift.StringResource(key: "Service For :", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service added successfully!
      ///
      /// Locales: en, fr
      static let serviceAddedSuccessfully = Rswift.StringResource(key: "Service added successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service updated successfully!
      ///
      /// Locales: en, fr
      static let serviceUpdatedSuccessfully = Rswift.StringResource(key: "Service updated successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, fr
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Something Went Wrong!
      ///
      /// Locales: en, fr
      static let somethingWentWrong = Rswift.StringResource(key: "Something Went Wrong!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, fr
      static let termsAndConditions = Rswift.StringResource(key: "Terms and Conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: This time slot is already booked by someone!
      ///
      /// Locales: en, fr
      static let thisTimeSlotIsAlreadyBookedBySomeone = Rswift.StringResource(key: "This time slot is already booked by someone!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, fr
      static let update = Rswift.StringResource(key: "Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Update Service
      ///
      /// Locales: en, fr
      static let updateService = Rswift.StringResource(key: "Update Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, fr
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: We will contact you soon
      ///
      /// Locales: en, fr
      static let weWillContactYouSoon = Rswift.StringResource(key: "We will contact you soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, fr
      static let withdraw = Rswift.StringResource(key: "Withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Write
      ///
      /// Locales: en, fr
      static let write = Rswift.StringResource(key: "Write", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Write something about your service
      ///
      /// Locales: en, fr
      static let writeSomethingAboutYourService = Rswift.StringResource(key: "Write something about your service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, fr
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You have 1 pending withdraw request for
      ///
      /// Locales: en, fr
      static let youHave1PendingWithdrawRequestFor = Rswift.StringResource(key: "You have 1 pending withdraw request for", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your Booking request is accepted
      ///
      /// Locales: en, fr
      static let yourBookingRequestIsAccepted = Rswift.StringResource(key: "Your Booking request is accepted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your account has been successfully registered. Please wait for the administrator's approval before using the application. Thank you for your understanding
      ///
      /// Locales: en, fr
      static let yourAccountHasBeenSuccessfullyRegisteredPleaseWaitForTheAdministratorSApprovalBeforeUsingTheApplicationThankYouForYourUnderstanding = Rswift.StringResource(key: "Your account has been successfully registered. Please wait for the administrator's approval before using the application.\nThank you for your understanding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your account is being verified. Please wait for the administrator's approval before using the application. Thank you for your understanding
      ///
      /// Locales: en, fr
      static let yourAccountIsBeingVerifiedPleaseWaitForTheAdministratorSApprovalBeforeUsingTheApplicationThankYouForYourUnderstanding = Rswift.StringResource(key: "Your account is being verified.\nPlease wait for the administrator's approval before using the application.\nThank you for your understanding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your booking accepted successfullly!
      ///
      /// Locales: en, fr
      static let yourBookingAcceptedSuccessfullly = Rswift.StringResource(key: "Your booking accepted successfullly!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your booking request declined by the provider, please book your request with other provider. Thanks
      ///
      /// Locales: en, fr
      static let yourBookingRequestDeclinedByTheProviderPleaseBookYourRequestWithOtherProviderThanks = Rswift.StringResource(key: "Your booking request declined by the provider, please book your request with other provider. Thanks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your professional arrived on your location
      ///
      /// Locales: en, fr
      static let yourProfessionalArrivedOnYourLocation = Rswift.StringResource(key: "Your professional arrived on your location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your professional is on the way
      ///
      /// Locales: en, fr
      static let yourProfessionalIsOnTheWay = Rswift.StringResource(key: "Your professional is on the way", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Your professional start work
      ///
      /// Locales: en, fr
      static let yourProfessionalStartWork = Rswift.StringResource(key: "Your professional start work", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: Accept
      ///
      /// Locales: en, fr
      static func accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Accept"
        }

        return NSLocalizedString("Accept", bundle: bundle, comment: "")
      }

      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static func accepted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Accepted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Accepted"
        }

        return NSLocalizedString("Accepted", bundle: bundle, comment: "")
      }

      /// en translation: Add Card
      ///
      /// Locales: en, fr
      static func addCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Card"
        }

        return NSLocalizedString("Add Card", bundle: bundle, comment: "")
      }

      /// en translation: Add Provider image
      ///
      /// Locales: en, fr
      static func addProviderImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Provider image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Provider image"
        }

        return NSLocalizedString("Add Provider image", bundle: bundle, comment: "")
      }

      /// en translation: Add Service
      ///
      /// Locales: en, fr
      static func addService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Service"
        }

        return NSLocalizedString("Add Service", bundle: bundle, comment: "")
      }

      /// en translation: Add provider Cover Image
      ///
      /// Locales: en, fr
      static func addProviderCoverImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add provider Cover Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add provider Cover Image"
        }

        return NSLocalizedString("Add provider Cover Image", bundle: bundle, comment: "")
      }

      /// en translation: Add your Provider details
      ///
      /// Locales: en, fr
      static func addYourProviderDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add your Provider details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add your Provider details"
        }

        return NSLocalizedString("Add your Provider details", bundle: bundle, comment: "")
      }

      /// en translation: Address Deleted Successfully
      ///
      /// Locales: en, fr
      static func addressDeletedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address Deleted Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address Deleted Successfully"
        }

        return NSLocalizedString("Address Deleted Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Address added successfully
      ///
      /// Locales: en, fr
      static func addressAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address added successfully"
        }

        return NSLocalizedString("Address added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Already one withdraw request sent
      ///
      /// Locales: en, fr
      static func alreadyOneWithdrawRequestSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already one withdraw request sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already one withdraw request sent"
        }

        return NSLocalizedString("Already one withdraw request sent", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to delete this image
      ///
      /// Locales: en, fr
      static func areYouSureToDeleteThisImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure to delete this image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure to delete this image"
        }

        return NSLocalizedString("Are you sure to delete this image", bundle: bundle, comment: "")
      }

      /// en translation: Booking Request
      ///
      /// Locales: en, fr
      static func bookingRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking Request"
        }

        return NSLocalizedString("Booking Request", bundle: bundle, comment: "")
      }

      /// en translation: Booking completed successfullly!
      ///
      /// Locales: en, fr
      static func bookingCompletedSuccessfullly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking completed successfullly!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking completed successfullly!"
        }

        return NSLocalizedString("Booking completed successfullly!", bundle: bundle, comment: "")
      }

      /// en translation: Booking has been cancelled successfully!
      ///
      /// Locales: en, fr
      static func bookingHasBeenCancelledSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking has been cancelled successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking has been cancelled successfully!"
        }

        return NSLocalizedString("Booking has been cancelled successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab
      ///
      /// Locales: en, fr
      static func bookingSentSuccessfullyPleaseWaitForProviderConfirmationYouCanSeeBookingStatusInMyOrdersTab(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab"
        }

        return NSLocalizedString("Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab", bundle: bundle, comment: "")
      }

      /// en translation: CUSTOMER
      ///
      /// Locales: en, fr
      static func customeR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CUSTOMER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CUSTOMER"
        }

        return NSLocalizedString("CUSTOMER", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, fr
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Card Is Incomplete!
      ///
      /// Locales: en, fr
      static func cardIsIncomplete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card Is Incomplete!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card Is Incomplete!"
        }

        return NSLocalizedString("Card Is Incomplete!", bundle: bundle, comment: "")
      }

      /// en translation: Card Is Invalid!
      ///
      /// Locales: en, fr
      static func cardIsInvalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card Is Invalid!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card Is Invalid!"
        }

        return NSLocalizedString("Card Is Invalid!", bundle: bundle, comment: "")
      }

      /// en translation: Card saved successfully!
      ///
      /// Locales: en, fr
      static func cardSavedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card saved successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card saved successfully!"
        }

        return NSLocalizedString("Card saved successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, fr
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Choose Account Type
      ///
      /// Locales: en, fr
      static func chooseAccountType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose Account Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose Account Type"
        }

        return NSLocalizedString("Choose Account Type", bundle: bundle, comment: "")
      }

      /// en translation: Company
      ///
      /// Locales: en, fr
      static func company(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Company", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Company"
        }

        return NSLocalizedString("Company", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, fr
      static func completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed"
        }

        return NSLocalizedString("Completed", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Booking
      ///
      /// Locales: en, fr
      static func confirmBooking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Booking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Booking"
        }

        return NSLocalizedString("Confirm Booking", bundle: bundle, comment: "")
      }

      /// en translation: Congratulation Your account has been created successfully!
      ///
      /// Locales: en, fr
      static func congratulationYourAccountHasBeenCreatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Congratulation Your account has been created successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Congratulation Your account has been created successfully!"
        }

        return NSLocalizedString("Congratulation Your account has been created successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Contact
      ///
      /// Locales: en, fr
      static func contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contact"
        }

        return NSLocalizedString("Contact", bundle: bundle, comment: "")
      }

      /// en translation: Create New Account
      ///
      /// Locales: en, fr
      static func createNewAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create New Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create New Account"
        }

        return NSLocalizedString("Create New Account", bundle: bundle, comment: "")
      }

      /// en translation: DATE
      ///
      /// Locales: en, fr
      static func datE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DATE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DATE"
        }

        return NSLocalizedString("DATE", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, fr
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete"
        }

        return NSLocalizedString("Delete", bundle: bundle, comment: "")
      }

      /// en translation: Deleted Successfully
      ///
      /// Locales: en, fr
      static func deletedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Deleted Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Deleted Successfully"
        }

        return NSLocalizedString("Deleted Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: en, fr
      static func details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Details"
        }

        return NSLocalizedString("Details", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, fr
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Earning
      ///
      /// Locales: en, fr
      static func earning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earning"
        }

        return NSLocalizedString("Earning", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, fr
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Email Address Not Found
      ///
      /// Locales: en, fr
      static func emailAddressNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email Address Not Found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email Address Not Found"
        }

        return NSLocalizedString("Email Address Not Found", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, fr
      static func enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter"
        }

        return NSLocalizedString("Enter", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: en, fr
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot Password"
        }

        return NSLocalizedString("Forgot Password", bundle: bundle, comment: "")
      }

      /// en translation: Gallary
      ///
      /// Locales: en, fr
      static func gallary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallary"
        }

        return NSLocalizedString("Gallary", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, fr
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery"
        }

        return NSLocalizedString("Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Gallery photo added successfully
      ///
      /// Locales: en, fr
      static func galleryPhotoAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery photo added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery photo added successfully"
        }

        return NSLocalizedString("Gallery photo added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, fr
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: I am the manager of a hair Provider and i want to add my Provider
      ///
      /// Locales: en, fr
      static func iAmTheManagerOfAHairProviderAndIWantToAddMyProvider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I am the manager of a hair Provider and i want to add my Provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I am the manager of a hair Provider and i want to add my Provider"
        }

        return NSLocalizedString("I am the manager of a hair Provider and i want to add my Provider", bundle: bundle, comment: "")
      }

      /// en translation: I want to look good, i need to book
      ///
      /// Locales: en, fr
      static func iWantToLookGoodINeedToBook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I want to look good, i need to book", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I want to look good, i need to book"
        }

        return NSLocalizedString("I want to look good, i need to book", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, fr
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language"
        }

        return NSLocalizedString("Language", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: en, fr
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Location Not Found
      ///
      /// Locales: en, fr
      static func locationNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location Not Found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location Not Found"
        }

        return NSLocalizedString("Location Not Found", bundle: bundle, comment: "")
      }

      /// en translation: Manage Home Service Fee
      ///
      /// Locales: en, fr
      static func manageHomeServiceFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Home Service Fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Home Service Fee"
        }

        return NSLocalizedString("Manage Home Service Fee", bundle: bundle, comment: "")
      }

      /// en translation: Manage Profile
      ///
      /// Locales: en, fr
      static func manageProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Profile"
        }

        return NSLocalizedString("Manage Profile", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: en, fr
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message"
        }

        return NSLocalizedString("Message", bundle: bundle, comment: "")
      }

      /// en translation: My Address
      ///
      /// Locales: en, fr
      static func myAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Address"
        }

        return NSLocalizedString("My Address", bundle: bundle, comment: "")
      }

      /// en translation: My Bookings
      ///
      /// Locales: en, fr
      static func myBookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Bookings"
        }

        return NSLocalizedString("My Bookings", bundle: bundle, comment: "")
      }

      /// en translation: My Service
      ///
      /// Locales: en, fr
      static func myService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Service"
        }

        return NSLocalizedString("My Service", bundle: bundle, comment: "")
      }

      /// en translation: New password has sent to your email!
      ///
      /// Locales: en, fr
      static func newPasswordHasSentToYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New password has sent to your email!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New password has sent to your email!"
        }

        return NSLocalizedString("New password has sent to your email!", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, fr
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No Internet Connection. Make sure your device is connected to the internet
      ///
      /// Locales: en, fr
      static func noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Internet Connection. Make sure your device is connected to the internet"
        }

        return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet", bundle: bundle, comment: "")
      }

      /// en translation: No pending request found
      ///
      /// Locales: en, fr
      static func noPendingRequestFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No pending request found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No pending request found"
        }

        return NSLocalizedString("No pending request found", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en, fr
      static func notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification"
        }

        return NSLocalizedString("Notification", bundle: bundle, comment: "")
      }

      /// en translation: Notify Arrived
      ///
      /// Locales: en, fr
      static func notifyArrived(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notify Arrived", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notify Arrived"
        }

        return NSLocalizedString("Notify Arrived", bundle: bundle, comment: "")
      }

      /// en translation: Notify Complete
      ///
      /// Locales: en, fr
      static func notifyComplete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notify Complete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notify Complete"
        }

        return NSLocalizedString("Notify Complete", bundle: bundle, comment: "")
      }

      /// en translation: Notify On The Way
      ///
      /// Locales: en, fr
      static func notifyOnTheWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notify On The Way", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notify On The Way"
        }

        return NSLocalizedString("Notify On The Way", bundle: bundle, comment: "")
      }

      /// en translation: Notify Start
      ///
      /// Locales: en, fr
      static func notifyStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notify Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notify Start"
        }

        return NSLocalizedString("Notify Start", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, fr
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: PROVIDER
      ///
      /// Locales: en, fr
      static func provideR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PROVIDER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PROVIDER"
        }

        return NSLocalizedString("PROVIDER", bundle: bundle, comment: "")
      }

      /// en translation: Password changed successfully!
      ///
      /// Locales: en, fr
      static func passwordChangedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password changed successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password changed successfully!"
        }

        return NSLocalizedString("Password changed successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Payment
      ///
      /// Locales: en, fr
      static func payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment"
        }

        return NSLocalizedString("Payment", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: en, fr
      static func pending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pending"
        }

        return NSLocalizedString("Pending", bundle: bundle, comment: "")
      }

      /// en translation: Please Confirm Password
      ///
      /// Locales: en, fr
      static func pleaseConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Confirm Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Confirm Password"
        }

        return NSLocalizedString("Please Confirm Password", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter message
      ///
      /// Locales: en, fr
      static func pleaseEnterMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter message"
        }

        return NSLocalizedString("Please Enter message", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter the Password!
      ///
      /// Locales: en, fr
      static func pleaseEnterThePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter the Password!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter the Password!"
        }

        return NSLocalizedString("Please Enter the Password!", bundle: bundle, comment: "")
      }

      /// en translation: Please Read the CGU For Proceed
      ///
      /// Locales: en, fr
      static func pleaseReadTheCGUForProceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Read the CGU For Proceed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Read the CGU For Proceed"
        }

        return NSLocalizedString("Please Read the CGU For Proceed", bundle: bundle, comment: "")
      }

      /// en translation: Please Read the CGV For Proceed
      ///
      /// Locales: en, fr
      static func pleaseReadTheCGVForProceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Read the CGV For Proceed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Read the CGV For Proceed"
        }

        return NSLocalizedString("Please Read the CGV For Proceed", bundle: bundle, comment: "")
      }

      /// en translation: Please Wait!!
      ///
      /// Locales: en, fr
      static func pleaseWait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Wait!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Wait!!"
        }

        return NSLocalizedString("Please Wait!!", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the description
      ///
      /// Locales: en, fr
      static func pleaseEnterTheDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the description"
        }

        return NSLocalizedString("Please enter the description", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the feedback
      ///
      /// Locales: en, fr
      static func pleaseEnterTheFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the feedback"
        }

        return NSLocalizedString("Please enter the feedback", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the price
      ///
      /// Locales: en, fr
      static func pleaseEnterThePrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the price"
        }

        return NSLocalizedString("Please enter the price", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the reason
      ///
      /// Locales: en, fr
      static func pleaseEnterTheReason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the reason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the reason"
        }

        return NSLocalizedString("Please enter the reason", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the required details
      ///
      /// Locales: en, fr
      static func pleaseEnterTheRequiredDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the required details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the required details"
        }

        return NSLocalizedString("Please enter the required details", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the title
      ///
      /// Locales: en, fr
      static func pleaseEnterTheTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the title"
        }

        return NSLocalizedString("Please enter the title", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the valid email
      ///
      /// Locales: en, fr
      static func pleaseEnterTheValidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the valid email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the valid email"
        }

        return NSLocalizedString("Please enter the valid email", bundle: bundle, comment: "")
      }

      /// en translation: Please select rating!
      ///
      /// Locales: en, fr
      static func pleaseSelectRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select rating!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select rating!"
        }

        return NSLocalizedString("Please select rating!", bundle: bundle, comment: "")
      }

      /// en translation: Please select the address
      ///
      /// Locales: en, fr
      static func pleaseSelectTheAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the address"
        }

        return NSLocalizedString("Please select the address", bundle: bundle, comment: "")
      }

      /// en translation: Please select the category
      ///
      /// Locales: en, fr
      static func pleaseSelectTheCategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the category"
        }

        return NSLocalizedString("Please select the category", bundle: bundle, comment: "")
      }

      /// en translation: Please select the service
      ///
      /// Locales: en, fr
      static func pleaseSelectTheService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the service"
        }

        return NSLocalizedString("Please select the service", bundle: bundle, comment: "")
      }

      /// en translation: Please select the sub-category
      ///
      /// Locales: en, fr
      static func pleaseSelectTheSubCategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the sub-category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the sub-category"
        }

        return NSLocalizedString("Please select the sub-category", bundle: bundle, comment: "")
      }

      /// en translation: Please select the time slot
      ///
      /// Locales: en, fr
      static func pleaseSelectTheTimeSlot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the time slot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the time slot"
        }

        return NSLocalizedString("Please select the time slot", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy Policy"
        }

        return NSLocalizedString("Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: Profile updated successfully!
      ///
      /// Locales: en, fr
      static func profileUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile updated successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile updated successfully!"
        }

        return NSLocalizedString("Profile updated successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Provider Name
      ///
      /// Locales: en, fr
      static func providerName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Provider Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Provider Name"
        }

        return NSLocalizedString("Provider Name", bundle: bundle, comment: "")
      }

      /// en translation: Rating submitted successfully
      ///
      /// Locales: en, fr
      static func ratingSubmittedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rating submitted successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rating submitted successfully"
        }

        return NSLocalizedString("Rating submitted successfully", bundle: bundle, comment: "")
      }

      /// en translation: Reason
      ///
      /// Locales: en, fr
      static func reason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reason"
        }

        return NSLocalizedString("Reason", bundle: bundle, comment: "")
      }

      /// en translation: Reject
      ///
      /// Locales: en, fr
      static func reject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reject"
        }

        return NSLocalizedString("Reject", bundle: bundle, comment: "")
      }

      /// en translation: Request Details
      ///
      /// Locales: en, fr
      static func requestDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request Details"
        }

        return NSLocalizedString("Request Details", bundle: bundle, comment: "")
      }

      /// en translation: Request added successfully
      ///
      /// Locales: en, fr
      static func requestAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request added successfully"
        }

        return NSLocalizedString("Request added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Required First Name
      ///
      /// Locales: en, fr
      static func requiredFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Required First Name"
        }

        return NSLocalizedString("Required First Name", bundle: bundle, comment: "")
      }

      /// en translation: Required Last Name
      ///
      /// Locales: en, fr
      static func requiredLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Required Last Name"
        }

        return NSLocalizedString("Required Last Name", bundle: bundle, comment: "")
      }

      /// en translation: Reviews
      ///
      /// Locales: en, fr
      static func reviews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reviews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reviews"
        }

        return NSLocalizedString("Reviews", bundle: bundle, comment: "")
      }

      /// en translation: Saved Cards
      ///
      /// Locales: en, fr
      static func savedCards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Saved Cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Saved Cards"
        }

        return NSLocalizedString("Saved Cards", bundle: bundle, comment: "")
      }

      /// en translation: Search Results
      ///
      /// Locales: en, fr
      static func searchResults(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Results"
        }

        return NSLocalizedString("Search Results", bundle: bundle, comment: "")
      }

      /// en translation: Select Provider open and close time
      ///
      /// Locales: en, fr
      static func selectProviderOpenAndCloseTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Provider open and close time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Provider open and close time"
        }

        return NSLocalizedString("Select Provider open and close time", bundle: bundle, comment: "")
      }

      /// en translation: Select Sub Category
      ///
      /// Locales: en, fr
      static func selectSubCategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Sub Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Sub Category"
        }

        return NSLocalizedString("Select Sub Category", bundle: bundle, comment: "")
      }

      /// en translation: Service For :
      ///
      /// Locales: en, fr
      static func serviceFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service For :", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service For :"
        }

        return NSLocalizedString("Service For :", bundle: bundle, comment: "")
      }

      /// en translation: Service added successfully!
      ///
      /// Locales: en, fr
      static func serviceAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service added successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service added successfully!"
        }

        return NSLocalizedString("Service added successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Service updated successfully!
      ///
      /// Locales: en, fr
      static func serviceUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service updated successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service updated successfully!"
        }

        return NSLocalizedString("Service updated successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, fr
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Something Went Wrong!
      ///
      /// Locales: en, fr
      static func somethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something Went Wrong!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something Went Wrong!"
        }

        return NSLocalizedString("Something Went Wrong!", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, fr
      static func termsAndConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms and Conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms and Conditions"
        }

        return NSLocalizedString("Terms and Conditions", bundle: bundle, comment: "")
      }

      /// en translation: This time slot is already booked by someone!
      ///
      /// Locales: en, fr
      static func thisTimeSlotIsAlreadyBookedBySomeone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This time slot is already booked by someone!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This time slot is already booked by someone!"
        }

        return NSLocalizedString("This time slot is already booked by someone!", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, fr
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update"
        }

        return NSLocalizedString("Update", bundle: bundle, comment: "")
      }

      /// en translation: Update Service
      ///
      /// Locales: en, fr
      static func updateService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Service"
        }

        return NSLocalizedString("Update Service", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, fr
      static func wallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet"
        }

        return NSLocalizedString("Wallet", bundle: bundle, comment: "")
      }

      /// en translation: We will contact you soon
      ///
      /// Locales: en, fr
      static func weWillContactYouSoon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We will contact you soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We will contact you soon"
        }

        return NSLocalizedString("We will contact you soon", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, fr
      static func withdraw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Withdraw", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Withdraw"
        }

        return NSLocalizedString("Withdraw", bundle: bundle, comment: "")
      }

      /// en translation: Write
      ///
      /// Locales: en, fr
      static func write(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write"
        }

        return NSLocalizedString("Write", bundle: bundle, comment: "")
      }

      /// en translation: Write something about your service
      ///
      /// Locales: en, fr
      static func writeSomethingAboutYourService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write something about your service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write something about your service"
        }

        return NSLocalizedString("Write something about your service", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, fr
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: You have 1 pending withdraw request for
      ///
      /// Locales: en, fr
      static func youHave1PendingWithdrawRequestFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have 1 pending withdraw request for", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have 1 pending withdraw request for"
        }

        return NSLocalizedString("You have 1 pending withdraw request for", bundle: bundle, comment: "")
      }

      /// en translation: Your Booking request is accepted
      ///
      /// Locales: en, fr
      static func yourBookingRequestIsAccepted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Booking request is accepted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Booking request is accepted"
        }

        return NSLocalizedString("Your Booking request is accepted", bundle: bundle, comment: "")
      }

      /// en translation: Your account has been successfully registered. Please wait for the administrator's approval before using the application. Thank you for your understanding
      ///
      /// Locales: en, fr
      static func yourAccountHasBeenSuccessfullyRegisteredPleaseWaitForTheAdministratorSApprovalBeforeUsingTheApplicationThankYouForYourUnderstanding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your account has been successfully registered. Please wait for the administrator's approval before using the application.\nThank you for your understanding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your account has been successfully registered. Please wait for the administrator's approval before using the application.\nThank you for your understanding"
        }

        return NSLocalizedString("Your account has been successfully registered. Please wait for the administrator's approval before using the application.\nThank you for your understanding", bundle: bundle, comment: "")
      }

      /// en translation: Your account is being verified. Please wait for the administrator's approval before using the application. Thank you for your understanding
      ///
      /// Locales: en, fr
      static func yourAccountIsBeingVerifiedPleaseWaitForTheAdministratorSApprovalBeforeUsingTheApplicationThankYouForYourUnderstanding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your account is being verified.\nPlease wait for the administrator's approval before using the application.\nThank you for your understanding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your account is being verified.\nPlease wait for the administrator's approval before using the application.\nThank you for your understanding"
        }

        return NSLocalizedString("Your account is being verified.\nPlease wait for the administrator's approval before using the application.\nThank you for your understanding", bundle: bundle, comment: "")
      }

      /// en translation: Your booking accepted successfullly!
      ///
      /// Locales: en, fr
      static func yourBookingAcceptedSuccessfullly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your booking accepted successfullly!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your booking accepted successfullly!"
        }

        return NSLocalizedString("Your booking accepted successfullly!", bundle: bundle, comment: "")
      }

      /// en translation: Your booking request declined by the provider, please book your request with other provider. Thanks
      ///
      /// Locales: en, fr
      static func yourBookingRequestDeclinedByTheProviderPleaseBookYourRequestWithOtherProviderThanks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your booking request declined by the provider, please book your request with other provider. Thanks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your booking request declined by the provider, please book your request with other provider. Thanks"
        }

        return NSLocalizedString("Your booking request declined by the provider, please book your request with other provider. Thanks", bundle: bundle, comment: "")
      }

      /// en translation: Your professional arrived on your location
      ///
      /// Locales: en, fr
      static func yourProfessionalArrivedOnYourLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your professional arrived on your location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your professional arrived on your location"
        }

        return NSLocalizedString("Your professional arrived on your location", bundle: bundle, comment: "")
      }

      /// en translation: Your professional is on the way
      ///
      /// Locales: en, fr
      static func yourProfessionalIsOnTheWay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your professional is on the way", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your professional is on the way"
        }

        return NSLocalizedString("Your professional is on the way", bundle: bundle, comment: "")
      }

      /// en translation: Your professional start work
      ///
      /// Locales: en, fr
      static func yourProfessionalStartWork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your professional start work", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your professional start work"
        }

        return NSLocalizedString("Your professional start work", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 277 localization keys.
    struct main {
      /// en translation: $ 0.0
      ///
      /// Locales: en, fr
      static let is4ZdTP1Text = Rswift.StringResource(key: "IS4-zd-tP1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: $ 0.0
      ///
      /// Locales: en, fr
      static let kzCZuNODText = Rswift.StringResource(key: "KzC-Zu-NOD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static let gfuZrKAFText = Rswift.StringResource(key: "Gfu-zr-kAF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static let lVtBpAdzText = Rswift.StringResource(key: "lVt-bp-adz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static let q83SQLQPText = Rswift.StringResource(key: "Q83-sQ-lQP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static let qrxQKQchText = Rswift.StringResource(key: "Qrx-qK-qch.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: $ 250.0
      ///
      /// Locales: en, fr
      static let kTNFhGCbText = Rswift.StringResource(key: "kTN-fh-gCb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: $ 250.0
      ///
      /// Locales: en, fr
      static let t3PQwNHbText = Rswift.StringResource(key: "t3P-qw-NHb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en, fr
      static let bcXReB9eText = Rswift.StringResource(key: "BcX-re-b9e.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en, fr
      static let oau8QFbpText = Rswift.StringResource(key: "OAU-8Q-fbp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 0 KM
      ///
      /// Locales: en, fr
      static let usue6ZmzText = Rswift.StringResource(key: "USU-e6-Zmz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 0000
      ///
      /// Locales: en, fr
      static let wxcFfCkHText = Rswift.StringResource(key: "WXC-Ff-ckH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 1 
      ///
      /// Locales: en, fr
      static let h88ZPRJText = Rswift.StringResource(key: "2H8-8Z-pRJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 1 
      ///
      /// Locales: en, fr
      static let qEQMWlBText = Rswift.StringResource(key: "6qE-QM-WlB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 1 hour
      ///
      /// Locales: en, fr
      static let fdG2MOaNText = Rswift.StringResource(key: "fdG-2M-oaN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 1 hour
      ///
      /// Locales: en, fr
      static let rufIv6WVText = Rswift.StringResource(key: "ruf-iv-6WV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 18:00 - 18:30
      ///
      /// Locales: en, fr
      static let nuBGJRRBText = Rswift.StringResource(key: "nuB-GJ-rRB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 18:00 - 18:30
      ///
      /// Locales: en, fr
      static let pAyXmTRHText = Rswift.StringResource(key: "PAy-xm-TRH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2 km (5 Km)
      ///
      /// Locales: en, fr
      static let tYRSGYjhText = Rswift.StringResource(key: "tYR-SG-Yjh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-10
      ///
      /// Locales: en, fr
      static let pVIFlLrOText = Rswift.StringResource(key: "pVI-Fl-LrO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-10
      ///
      /// Locales: en, fr
      static let yeTQMFqcText = Rswift.StringResource(key: "yeT-QM-fqc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 4.33(3)
      ///
      /// Locales: en, fr
      static let cEoMhpText = Rswift.StringResource(key: "61C-Eo-Mhp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 98989898
      ///
      /// Locales: en, fr
      static let h0NOCHPJText = Rswift.StringResource(key: "H0N-OC-HPJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 98989898
      ///
      /// Locales: en, fr
      static let tgTQgYwPText = Rswift.StringResource(key: "tgT-Qg-YwP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: ADD NEW CARD
      ///
      /// Locales: en, fr
      static let nacIMAvlNormalTitle = Rswift.StringResource(key: "Nac-iM-Avl.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, fr
      static let wm9ArXo7NormalTitle = Rswift.StringResource(key: "Wm9-ar-Xo7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: About Details
      ///
      /// Locales: en, fr
      static let na5PeHpIText = Rswift.StringResource(key: "NA5-Pe-hpI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, fr
      static let y7kHhWNormalTitle = Rswift.StringResource(key: "83Y-7k-hhW.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static let cVlFP8IqNormalTitle = Rswift.StringResource(key: "CVl-fP-8Iq.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static let hd2CgBzcNormalTitle = Rswift.StringResource(key: "HD2-Cg-Bzc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Account Holder Name
      ///
      /// Locales: en, fr
      static let unyW9XT4Placeholder = Rswift.StringResource(key: "Uny-w9-XT4.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, fr
      static let xwB3BNhXNormalTitle = Rswift.StringResource(key: "xwB-3B-NhX.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add Image
      ///
      /// Locales: en, fr
      static let lQZ0UL41Text = Rswift.StringResource(key: "lQZ-0U-L41.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add Image
      ///
      /// Locales: en, fr
      static let w3xBBImbText = Rswift.StringResource(key: "W3x-BB-imb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add Provider image
      ///
      /// Locales: en, fr
      static let sxmHqYuhText = Rswift.StringResource(key: "SXM-Hq-Yuh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add provider Cover Image
      ///
      /// Locales: en, fr
      static let zveJlJxGText = Rswift.StringResource(key: "zve-jl-jxG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add your Provider details
      ///
      /// Locales: en, fr
      static let gnaBhOzAText = Rswift.StringResource(key: "GNA-bh-ozA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, fr
      static let vo6n9zsText = Rswift.StringResource(key: "3VO-6n-9zs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, fr
      static let wa3IFXqoText = Rswift.StringResource(key: "WA3-IF-Xqo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Address Type
      ///
      /// Locales: en, fr
      static let oQzCkX4zPlaceholder = Rswift.StringResource(key: "OQz-ck-x4z.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Admin Service Fee
      ///
      /// Locales: en, fr
      static let mcrExRSkText = Rswift.StringResource(key: "Mcr-Ex-RSk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Already have an account ?
      ///
      /// Locales: en, fr
      static let dJmBIAmvText = Rswift.StringResource(key: "DJm-bI-amv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Already have an account ?
      ///
      /// Locales: en, fr
      static let xH8EORakText = Rswift.StringResource(key: "xH8-eO-Rak.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Available Slot
      ///
      /// Locales: en, fr
      static let grA3Mw0Text = Rswift.StringResource(key: "9Gr-a3-Mw0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Avg. Rating
      ///
      /// Locales: en, fr
      static let xDhAzEMeText = Rswift.StringResource(key: "xDh-Az-eMe.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Bank Branch Name
      ///
      /// Locales: en, fr
      static let u9U8iWWZPlaceholder = Rswift.StringResource(key: "U9U-8i-WWZ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Book
      ///
      /// Locales: en, fr
      static let nQlFTNgnNormalTitle = Rswift.StringResource(key: "NQl-FT-Ngn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab
      ///
      /// Locales: en, fr
      static let vSEHg5iIText = Rswift.StringResource(key: "vSE-hg-5iI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let eBAB6XarNormalTitle = Rswift.StringResource(key: "eBA-b6-xar.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let kOBJXIshNormalTitle = Rswift.StringResource(key: "kOB-jX-Ish.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let lntCeEWFNormalTitle = Rswift.StringResource(key: "lnt-ce-eWF.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let znJ7ZrUNormalTitle = Rswift.StringResource(key: "5Zn-J7-ZrU.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Card Number
      ///
      /// Locales: en, fr
      static let dfBpRcZText = Rswift.StringResource(key: "6df-bp-RcZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: en, fr
      static let gchIiJUHText = Rswift.StringResource(key: "gch-Ii-jUH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: en, fr
      static let o8oAWVDCText = Rswift.StringResource(key: "o8o-AW-vDC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, fr
      static let bsILHM8EText = Rswift.StringResource(key: "bsI-LH-M8E.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, fr
      static let vL2BiYspText = Rswift.StringResource(key: "vL2-Bi-ysp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: en, fr
      static let eO53veTitle = Rswift.StringResource(key: "58e-o5-3ve.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: en, fr
      static let sHUFGKGUTitle = Rswift.StringResource(key: "sHU-FG-KGU.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Choose User Type
      ///
      /// Locales: en, fr
      static let dXgUfANCText = Rswift.StringResource(key: "dXg-uf-ANC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, fr
      static let b8OR04DTNormalTitle = Rswift.StringResource(key: "b8O-R0-4DT.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Company
      ///
      /// Locales: en, fr
      static let sluSmC9RPlaceholder = Rswift.StringResource(key: "slu-sm-C9R.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Complete
      ///
      /// Locales: en, fr
      static let gEY8KGNormalTitle = Rswift.StringResource(key: "69g-eY-8KG.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, fr
      static let gatH0TFrPlaceholder = Rswift.StringResource(key: "Gat-H0-tFr.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, fr
      static let uqAbHu5Placeholder = Rswift.StringResource(key: "0UQ-ab-Hu5.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, fr
      static let zkUSoZkjPlaceholder = Rswift.StringResource(key: "zkU-so-zkj.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Contact Us
      ///
      /// Locales: en, fr
      static let gCb4ZWyRText = Rswift.StringResource(key: "GCb-4Z-wyR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Contact Us
      ///
      /// Locales: en, fr
      static let ptnCCUbeText = Rswift.StringResource(key: "ptn-cC-Ube.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, fr
      static let duINDA9lNormalTitle = Rswift.StringResource(key: "DuI-ND-A9l.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Current Password
      ///
      /// Locales: en, fr
      static let mw8K08K8Placeholder = Rswift.StringResource(key: "mw8-K0-8K8.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Current Wallet Amount
      ///
      /// Locales: en, fr
      static let xx32XXUkText = Rswift.StringResource(key: "xx3-2X-XUk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: DONE
      ///
      /// Locales: en, fr
      static let bqHJDSbxNormalTitle = Rswift.StringResource(key: "BqH-JD-Sbx.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Date & Time
      ///
      /// Locales: en, fr
      static let nOyIGZ8MText = Rswift.StringResource(key: "nOy-IG-Z8M.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Date & Time
      ///
      /// Locales: en, fr
      static let sbEAgZwqText = Rswift.StringResource(key: "sbE-ag-zwq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Date & Time
      ///
      /// Locales: en, fr
      static let xvmStZZ2Text = Rswift.StringResource(key: "xvm-st-ZZ2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, fr
      static let cUBAzKLcText = Rswift.StringResource(key: "cUB-Az-KLc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, fr
      static let rpRJDInMText = Rswift.StringResource(key: "rpR-jD-InM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, fr
      static let kOXPZPCRText = Rswift.StringResource(key: "kOX-pZ-pCR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, fr
      static let sLLeFBLText = Rswift.StringResource(key: "9sL-Le-fBL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, fr
      static let xepK5IjmText = Rswift.StringResource(key: "xep-k5-Ijm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Do you have any specific instruction?
      ///
      /// Locales: en, fr
      static let pE8s27wText = Rswift.StringResource(key: "6pE-8s-27w.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Don't have an account ? 
      ///
      /// Locales: en, fr
      static let dlLVYVNuText = Rswift.StringResource(key: "dlL-VY-VNu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Duration
      ///
      /// Locales: en, fr
      static let bhA9DC2RText = Rswift.StringResource(key: "BhA-9D-c2R.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Earning
      ///
      /// Locales: en, fr
      static let k4We5XbTitle = Rswift.StringResource(key: "6K4-we-5Xb.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, fr
      static let hn41Z4U5NormalTitle = Rswift.StringResource(key: "Hn4-1Z-4U5.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let boiVkPp6Text = Rswift.StringResource(key: "Boi-vk-pp6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let ezRNnYLdPlaceholder = Rswift.StringResource(key: "EzR-Nn-YLd.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let fT9ATSkePlaceholder = Rswift.StringResource(key: "fT9-AT-Ske.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let hGfYd8kdPlaceholder = Rswift.StringResource(key: "HGf-yd-8kd.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let icyLhDLJPlaceholder = Rswift.StringResource(key: "Icy-lh-DLJ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let mEHGoLEFPlaceholder = Rswift.StringResource(key: "mEH-Go-LEF.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let p1vIEKEJPlaceholder = Rswift.StringResource(key: "P1v-iE-kEJ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let pgefxDgCText = Rswift.StringResource(key: "PGE-FX-dgC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let rbPMaCQNPlaceholder = Rswift.StringResource(key: "RbP-ma-cQN.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let xzVBpPc1Text = Rswift.StringResource(key: "xzV-Bp-pc1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, fr
      static let zEmCyPFHPlaceholder = Rswift.StringResource(key: "zEm-cy-pFH.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, fr
      static let qZHEGIh0ConfigurationTitle = Rswift.StringResource(key: "qZH-eG-ih0.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, fr
      static let zd56XConfigurationTitle = Rswift.StringResource(key: "892-ZD-56X.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, fr
      static let fj1ACBX4Placeholder = Rswift.StringResource(key: "FJ1-AC-bX4.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, fr
      static let h8VBURbePlaceholder = Rswift.StringResource(key: "h8V-bU-rbe.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, fr
      static let iJlBNX3kPlaceholder = Rswift.StringResource(key: "iJl-BN-X3k.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, fr
      static let pcnQOCeFPlaceholder = Rswift.StringResource(key: "pcn-qO-CeF.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter Account Number
      ///
      /// Locales: en, fr
      static let t8UN9SkOPlaceholder = Rswift.StringResource(key: "T8U-n9-skO.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter IFSC code
      ///
      /// Locales: en, fr
      static let jjazayNyPlaceholder = Rswift.StringResource(key: "JJA-zA-YNy.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter Reason
      ///
      /// Locales: en, fr
      static let xeH9BXgaText = Rswift.StringResource(key: "XeH-9B-Xga.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter card number
      ///
      /// Locales: en, fr
      static let cz3QWW8NPlaceholder = Rswift.StringResource(key: "CZ3-qW-W8N.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter expiry date
      ///
      /// Locales: en, fr
      static let wBn10U0nPlaceholder = Rswift.StringResource(key: "WBn-10-u0n.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter name on card
      ///
      /// Locales: en, fr
      static let rNoDzIVhPlaceholder = Rswift.StringResource(key: "RNo-Dz-iVh.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter security code
      ///
      /// Locales: en, fr
      static let tOr6gHGPPlaceholder = Rswift.StringResource(key: "tOr-6g-HGP.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter your email address to rest your password
      ///
      /// Locales: en, fr
      static let nwuK3WHQText = Rswift.StringResource(key: "Nwu-K3-wHQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Expiry Date
      ///
      /// Locales: en, fr
      static let kDzZH9Text = Rswift.StringResource(key: "00K-dz-zH9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, fr
      static let afgG6WXFText = Rswift.StringResource(key: "afg-g6-WXF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, fr
      static let fzMLHhxPlaceholder = Rswift.StringResource(key: "2fz-mL-hhx.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, fr
      static let lyQ9l2ijText = Rswift.StringResource(key: "LyQ-9l-2ij.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, fr
      static let n0JIGGW5Placeholder = Rswift.StringResource(key: "N0J-IG-gW5.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, fr
      static let nngatGpLPlaceholder = Rswift.StringResource(key: "NNG-AT-GpL.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, fr
      static let um1XZPg8Placeholder = Rswift.StringResource(key: "UM1-xZ-Pg8.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: en, fr
      static let jyuGqLJvText = Rswift.StringResource(key: "jyu-gq-LJv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: en, fr
      static let gBa8jMmHNormalTitle = Rswift.StringResource(key: "gBa-8j-mmH.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: French
      ///
      /// Locales: en, fr
      static let eRbWuNGZConfigurationTitle = Rswift.StringResource(key: "ERb-Wu-nGZ.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: French
      ///
      /// Locales: en, fr
      static let lSEG08YuConfigurationTitle = Rswift.StringResource(key: "lSE-g0-8Yu.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gallary
      ///
      /// Locales: en, fr
      static let hMc1LUlRNormalTitle = Rswift.StringResource(key: "HMc-1L-ulR.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, fr
      static let sccCPW8oText = Rswift.StringResource(key: "Scc-cP-W8o.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Hired
      ///
      /// Locales: en, fr
      static let r3VD9BText = Rswift.StringResource(key: "67r-3V-d9B.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, fr
      static let y8VBVFzRNormalTitle = Rswift.StringResource(key: "Y8V-bV-fzR.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, fr
      static let mUs7ADh3Title = Rswift.StringResource(key: "mUs-7A-dh3.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, fr
      static let mVjD4YDVTitle = Rswift.StringResource(key: "mVj-d4-yDV.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, fr
      static let o79VDD6HText = Rswift.StringResource(key: "o79-VD-d6H.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home Cleaning
      ///
      /// Locales: en, fr
      static let b9s5tP39Text = Rswift.StringResource(key: "B9s-5t-P39.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home Cleaning
      ///
      /// Locales: en, fr
      static let hBdQLSooText = Rswift.StringResource(key: "HBd-qL-Soo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Home Cleaning
      ///
      /// Locales: en, fr
      static let z2UB1XpXText = Rswift.StringResource(key: "Z2U-b1-xpX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: I have read the CGU and accept them
      ///
      /// Locales: en, fr
      static let y818YucText = Rswift.StringResource(key: "5y8-18-Yuc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: I have read the CGV and accept them
      ///
      /// Locales: en, fr
      static let nsFSYGAText = Rswift.StringResource(key: "0Ns-FS-yGA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: I have read the Terms & Conditions and accept them
      ///
      /// Locales: en, fr
      static let mOpO0AJtText = Rswift.StringResource(key: "MOp-o0-AJt.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: If you cancel now you will be charged the cancelation fee 5%.
      ///
      /// Locales: en, fr
      static let rm6XaGNsText = Rswift.StringResource(key: "Rm6-xa-gNs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Invite Friend
      ///
      /// Locales: en, fr
      static let hJsCzBdKText = Rswift.StringResource(key: "hJs-cz-BdK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Invite Friend
      ///
      /// Locales: en, fr
      static let t9q5UKXzText = Rswift.StringResource(key: "T9q-5U-kXz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: KFC
      ///
      /// Locales: en, fr
      static let jmcKcTslText = Rswift.StringResource(key: "Jmc-Kc-Tsl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: LOGIN
      ///
      /// Locales: en, fr
      static let x9hEAUQVNormalTitle = Rswift.StringResource(key: "x9h-eA-uQV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, fr
      static let nIYiQgxText = Rswift.StringResource(key: "9nI-Yi-Qgx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, fr
      static let tgbvpZr1Text = Rswift.StringResource(key: "TGB-vP-Zr1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, fr
      static let xudK2ZUWText = Rswift.StringResource(key: "Xud-k2-ZUW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static let ai74MHvqPlaceholder = Rswift.StringResource(key: "Ai7-4M-Hvq.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static let cjDa7ITPlaceholder = Rswift.StringResource(key: "8Cj-da-7IT.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static let fKbW1ZS6Text = Rswift.StringResource(key: "fKb-W1-ZS6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static let hvX44O0HPlaceholder = Rswift.StringResource(key: "hvX-44-o0H.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static let iLXP4QM6Text = Rswift.StringResource(key: "iLX-p4-qM6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static let lCtFmZoOPlaceholder = Rswift.StringResource(key: "LCt-fm-zoO.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: List
      ///
      /// Locales: en, fr
      static let hbdE2ADaNormalTitle = Rswift.StringResource(key: "hbd-e2-aDa.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, fr
      static let plfCXHIZText = Rswift.StringResource(key: "plf-cX-HIZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, fr
      static let e5f4STAQNormalTitle = Rswift.StringResource(key: "e5f-4S-TAQ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Login to your account
      ///
      /// Locales: en, fr
      static let zXJTvNHEText = Rswift.StringResource(key: "zXJ-tv-NHE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, fr
      static let ecp0Z3uXNormalTitle = Rswift.StringResource(key: "Ecp-0Z-3uX.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, fr
      static let kKPUDSoZNormalTitle = Rswift.StringResource(key: "kKP-UD-SoZ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Make Payment
      ///
      /// Locales: en, fr
      static let zd8FyKVNText = Rswift.StringResource(key: "zd8-Fy-kVN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Manage Home Service Fee
      ///
      /// Locales: en, fr
      static let map4CVqCText = Rswift.StringResource(key: "Map-4C-VqC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Manage Provider Profile
      ///
      /// Locales: en, fr
      static let yxULYBpmNormalTitle = Rswift.StringResource(key: "yxU-LY-bpm.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Map
      ///
      /// Locales: en, fr
      static let apxd9LRMNormalTitle = Rswift.StringResource(key: "APX-D9-lRM.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mary Lara
      ///
      /// Locales: en, fr
      static let b5XGZ22dText = Rswift.StringResource(key: "b5X-gZ-22d.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let ap2RFR7hText = Rswift.StringResource(key: "Ap2-rF-r7h.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let cz4B05EAPlaceholder = Rswift.StringResource(key: "CZ4-B0-5EA.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let e5xMcRlpPlaceholder = Rswift.StringResource(key: "E5x-mc-rlp.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let heQMSChaPlaceholder = Rswift.StringResource(key: "HeQ-mS-Cha.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let iCn6pVoyText = Rswift.StringResource(key: "iCn-6p-Voy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let mSYYMTTMPlaceholder = Rswift.StringResource(key: "mSY-YM-tTM.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let pxanHqIPlaceholder = Rswift.StringResource(key: "4PX-aN-HqI.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static let vn7LyTcmText = Rswift.StringResource(key: "vn7-ly-Tcm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: My Orders
      ///
      /// Locales: en, fr
      static let qnOLjEPgTitle = Rswift.StringResource(key: "qnO-Lj-ePg.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: My Reviews
      ///
      /// Locales: en, fr
      static let w2h1rMKHText = Rswift.StringResource(key: "w2h-1r-mKH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: My Reviews
      ///
      /// Locales: en, fr
      static let yxRTAFXUText = Rswift.StringResource(key: "YxR-tA-FXU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: My Service
      ///
      /// Locales: en, fr
      static let e9S24WvHText = Rswift.StringResource(key: "e9S-24-wvH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Name On Card
      ///
      /// Locales: en, fr
      static let ykJgHq7Text = Rswift.StringResource(key: "0Yk-Jg-hq7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Name*
      ///
      /// Locales: en, fr
      static let r2K43PETPlaceholder = Rswift.StringResource(key: "r2K-43-PET.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, fr
      static let ve3IJKxtPlaceholder = Rswift.StringResource(key: "VE3-IJ-Kxt.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New Request
      ///
      /// Locales: en, fr
      static let aD9NHdeNormalTitle = Rswift.StringResource(key: "0aD-9N-hde.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Number Of Professional
      ///
      /// Locales: en, fr
      static let vx9WOBgYText = Rswift.StringResource(key: "vx9-WO-bgY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Number Of Professional
      ///
      /// Locales: en, fr
      static let zjCsS9sText = Rswift.StringResource(key: "6zj-Cs-S9s.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee Nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let b84XCIpTText = Rswift.StringResource(key: "B84-XC-IpT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, fr
      static let eGhHNHbjPlaceholder = Rswift.StringResource(key: "eGh-HN-Hbj.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, fr
      static let m3rCD4bAPlaceholder = Rswift.StringResource(key: "M3r-cD-4bA.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, fr
      static let oNeK0ESdPlaceholder = Rswift.StringResource(key: "ONe-k0-eSd.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Pay Now
      ///
      /// Locales: en, fr
      static let xYzHjVFfNormalTitle = Rswift.StringResource(key: "XYz-Hj-vFf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: en, fr
      static let zCq0BHEBNormalTitle = Rswift.StringResource(key: "ZCq-0B-hEB.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please be sure before deleting the account.
      ///
      /// Locales: en, fr
      static let w8uQkBaRText = Rswift.StringResource(key: "w8u-qk-baR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, fr
      static let jyr8gImCText = Rswift.StringResource(key: "JYR-8g-imC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, fr
      static let khBXkJEAText = Rswift.StringResource(key: "KhB-xk-jEA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Price Detail
      ///
      /// Locales: en, fr
      static let ljmCjYeNText = Rswift.StringResource(key: "ljm-cj-YeN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Price Detail
      ///
      /// Locales: en, fr
      static let reI5uEpLText = Rswift.StringResource(key: "ReI-5u-epL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Price Detail
      ///
      /// Locales: en, fr
      static let saXHYXOText = Rswift.StringResource(key: "3Sa-XH-yXO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static let qdFI63hGText = Rswift.StringResource(key: "qdF-i6-3hG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static let rl9YrEd7Text = Rswift.StringResource(key: "rl9-Yr-Ed7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static let xfVEJ07UText = Rswift.StringResource(key: "xfV-eJ-07U.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Provide Your Rating
      ///
      /// Locales: en, fr
      static let pLD1BC4Text = Rswift.StringResource(key: "0pL-d1-bC4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Provider Name
      ///
      /// Locales: en, fr
      static let rBqIHBI4Text = Rswift.StringResource(key: "RBq-IH-BI4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: REGISTER
      ///
      /// Locales: en, fr
      static let hRUZ7NtNormalTitle = Rswift.StringResource(key: "6hR-UZ-7Nt.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: REGISTER
      ///
      /// Locales: en, fr
      static let iCF350AuNormalTitle = Rswift.StringResource(key: "iCF-35-0Au.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static let lbp6eLOVText = Rswift.StringResource(key: "LBP-6e-lOV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Rate
      ///
      /// Locales: en, fr
      static let okYXdAJ1NormalTitle = Rswift.StringResource(key: "OkY-Xd-aJ1.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, fr
      static let pWXN1CrqNormalTitle = Rswift.StringResource(key: "pWX-N1-crq.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Reviews
      ///
      /// Locales: en, fr
      static let cRcOOVsUNormalTitle = Rswift.StringResource(key: "CRc-OO-vsU.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Reviews
      ///
      /// Locales: en, fr
      static let hOiXhVhPText = Rswift.StringResource(key: "hOi-Xh-VhP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, fr
      static let mjQEIB4MNormalTitle = Rswift.StringResource(key: "MjQ-EI-b4M.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, fr
      static let r9CbMlENormalTitle = Rswift.StringResource(key: "3r9-Cb-mlE.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, fr
      static let vdSO5Zb5NormalTitle = Rswift.StringResource(key: "vdS-O5-Zb5.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, fr
      static let wckai1wVNormalTitle = Rswift.StringResource(key: "WCK-AI-1wV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, fr
      static let f7U74OWQPlaceholder = Rswift.StringResource(key: "F7U-74-OWQ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, fr
      static let lYgHKYbGPlaceholder = Rswift.StringResource(key: "lYg-hK-YbG.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Search Location
      ///
      /// Locales: en, fr
      static let lkDGeBbKText = Rswift.StringResource(key: "lkD-Ge-bbK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Security Code
      ///
      /// Locales: en, fr
      static let xg5DaXWWText = Rswift.StringResource(key: "XG5-da-XWW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static let bpEGqOuvNormalTitle = Rswift.StringResource(key: "bpE-Gq-Ouv.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static let dm6TK5WYNormalTitle = Rswift.StringResource(key: "DM6-tK-5WY.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static let mfhViRvRNormalTitle = Rswift.StringResource(key: "mfh-vi-rvR.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static let nzHYtY77NormalTitle = Rswift.StringResource(key: "NzH-yt-y77.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Language
      ///
      /// Locales: en, fr
      static let aidy0AeFText = Rswift.StringResource(key: "AID-y0-AeF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Language
      ///
      /// Locales: en, fr
      static let bpN54F8NText = Rswift.StringResource(key: "BpN-54-f8N.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static let gadLDSb8Text = Rswift.StringResource(key: "Gad-lD-sb8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static let lng2g3GFText = Rswift.StringResource(key: "Lng-2g-3GF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static let m6j3BT4fText = Rswift.StringResource(key: "m6j-3B-T4f.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static let xWjCsL3TText = Rswift.StringResource(key: "xWj-cs-L3T.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static let yzUEaUoKText = Rswift.StringResource(key: "yzU-ea-UoK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Payment Card
      ///
      /// Locales: en, fr
      static let dd24pLakText = Rswift.StringResource(key: "dd2-4p-lak.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Provider Location
      ///
      /// Locales: en, fr
      static let inQOA4VfText = Rswift.StringResource(key: "InQ-OA-4Vf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Provider Location
      ///
      /// Locales: en, fr
      static let j8pEFC45Text = Rswift.StringResource(key: "J8p-eF-c45.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Provider open and close time
      ///
      /// Locales: en, fr
      static let xsKBjZqpText = Rswift.StringResource(key: "XsK-Bj-zqp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Rating
      ///
      /// Locales: en, fr
      static let dmFgQOEText = Rswift.StringResource(key: "8Dm-fg-qOE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Service Category
      ///
      /// Locales: en, fr
      static let pZaM7PtdText = Rswift.StringResource(key: "pZa-M7-ptd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Service Category
      ///
      /// Locales: en, fr
      static let zzAHeTDaText = Rswift.StringResource(key: "ZzA-He-tDa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Sub Category
      ///
      /// Locales: en, fr
      static let q5sXFYCnText = Rswift.StringResource(key: "Q5s-xF-YCn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Sub Category
      ///
      /// Locales: en, fr
      static let sjXJ9YviText = Rswift.StringResource(key: "SjX-J9-Yvi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Time
      ///
      /// Locales: en, fr
      static let mk64dEmpText = Rswift.StringResource(key: "mk6-4d-Emp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Time
      ///
      /// Locales: en, fr
      static let oeHHCDQNormalTitle = Rswift.StringResource(key: "8Oe-HH-CDQ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Select Time Interval
      ///
      /// Locales: en, fr
      static let fbEZUdhText = Rswift.StringResource(key: "5fb-eZ-Udh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, fr
      static let biJJPZibNormalTitle = Rswift.StringResource(key: "BiJ-JP-zib.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, fr
      static let gjxIdRlTNormalTitle = Rswift.StringResource(key: "gjx-Id-RlT.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, fr
      static let lnGOiN2JNormalTitle = Rswift.StringResource(key: "lnG-Oi-n2J.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Send Request
      ///
      /// Locales: en, fr
      static let dLyQ9TTkNormalTitle = Rswift.StringResource(key: "dLy-Q9-tTk.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Sending
      ///
      /// Locales: en, fr
      static let qjeLS1L3NormalTitle = Rswift.StringResource(key: "qje-LS-1L3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service
      ///
      /// Locales: en, fr
      static let uXBAmVUnNormalTitle = Rswift.StringResource(key: "uXB-am-VUn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service Total
      ///
      /// Locales: en, fr
      static let aO1I5TaPText = Rswift.StringResource(key: "aO1-I5-taP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Services
      ///
      /// Locales: en, fr
      static let xCdEYVcwTitle = Rswift.StringResource(key: "XCd-eY-Vcw.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, fr
      static let bb4MWMFdTitle = Rswift.StringResource(key: "bb4-mW-mFd.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, fr
      static let yPDMdOiwTitle = Rswift.StringResource(key: "yPD-md-oiw.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Shyam Vijaywergiya
      ///
      /// Locales: en, fr
      static let gs3O3JKsText = Rswift.StringResource(key: "Gs3-o3-JKs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Shyam Vijaywergiya
      ///
      /// Locales: en, fr
      static let k2cWxXbGText = Rswift.StringResource(key: "k2c-wx-xbG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Sign In Now
      ///
      /// Locales: en, fr
      static let w4PRBHBbNormalTitle = Rswift.StringResource(key: "w4P-RB-HBb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Sign In Now
      ///
      /// Locales: en, fr
      static let wbKPYHANormalTitle = Rswift.StringResource(key: "3wb-kP-YHA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Sign Up Now
      ///
      /// Locales: en, fr
      static let yVHQBzqNormalTitle = Rswift.StringResource(key: "8yV-hQ-Bzq.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, fr
      static let v3cFFN7aText = Rswift.StringResource(key: "v3c-FF-n7a.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Terms And Condition
      ///
      /// Locales: en, fr
      static let oWxPf9FDText = Rswift.StringResource(key: "OWx-Pf-9FD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, fr
      static let au1TI3yText = Rswift.StringResource(key: "5AU-1T-i3y.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, fr
      static let pKbLwIS4Text = Rswift.StringResource(key: "PKb-Lw-iS4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: en, fr
      static let b1CUAAC8Text = Rswift.StringResource(key: "b1C-uA-AC8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: en, fr
      static let rrmAISrmText = Rswift.StringResource(key: "rrm-AI-srm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Today Earning
      ///
      /// Locales: en, fr
      static let hSGIX828Text = Rswift.StringResource(key: "hSG-IX-828.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Today Earning
      ///
      /// Locales: en, fr
      static let pf5YF8gdText = Rswift.StringResource(key: "Pf5-yF-8gd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, fr
      static let nvvIa4DjText = Rswift.StringResource(key: "nvv-ia-4Dj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Total 
      ///
      /// Locales: en, fr
      static let p43F4NCoText = Rswift.StringResource(key: "P43-F4-nCo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Total 
      ///
      /// Locales: en, fr
      static let rJuXKJ5lText = Rswift.StringResource(key: "rJu-XK-J5l.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Total Earning
      ///
      /// Locales: en, fr
      static let iaCVN8eOText = Rswift.StringResource(key: "IaC-VN-8eO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Total Earning
      ///
      /// Locales: en, fr
      static let lmFYIJ2GText = Rswift.StringResource(key: "lmF-yI-j2G.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, fr
      static let c0MPfPVyNormalTitle = Rswift.StringResource(key: "C0M-Pf-PVy.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, fr
      static let jvlw3RKONormalTitle = Rswift.StringResource(key: "JVL-W3-rKO.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, fr
      static let lDiEdQGcNormalTitle = Rswift.StringResource(key: "LDi-Ed-QGc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Update Profile
      ///
      /// Locales: en, fr
      static let liEm0wAText = Rswift.StringResource(key: "1Li-em-0wA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Update Profile
      ///
      /// Locales: en, fr
      static let tCjJtL9xText = Rswift.StringResource(key: "TCj-jt-L9x.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Upload Photos
      ///
      /// Locales: en, fr
      static let tbGEIwNNormalTitle = Rswift.StringResource(key: "2Tb-GE-iwN.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, fr
      static let mVCS61GlText = Rswift.StringResource(key: "mVC-s6-1Gl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, fr
      static let xRcTHWyjText = Rswift.StringResource(key: "XRc-tH-Wyj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Wallet Balance
      ///
      /// Locales: en, fr
      static let eRaCfLg2Text = Rswift.StringResource(key: "eRa-cf-lg2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Wallet Balance
      ///
      /// Locales: en, fr
      static let hlMDbI88Text = Rswift.StringResource(key: "hlM-Db-I88.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: When would you like your service?
      ///
      /// Locales: en, fr
      static let cXnEpPQAText = Rswift.StringResource(key: "cXn-ep-pQA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, fr
      static let gw5IE37RNormalTitle = Rswift.StringResource(key: "Gw5-iE-37R.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, fr
      static let sQm0nRrwNormalTitle = Rswift.StringResource(key: "sQm-0n-rrw.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Write something about your service
      ///
      /// Locales: en, fr
      static let s2D3P69Text = Rswift.StringResource(key: "5S2-D3-P69.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, fr
      static let xDpPc96oNormalTitle = Rswift.StringResource(key: "xDp-Pc-96o.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You have 1 pending withdraw request for $ 1350
      ///
      /// Locales: en, fr
      static let b4yLftText = Rswift.StringResource(key: "28b-4y-Lft.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: label
      ///
      /// Locales: en, fr
      static let ft1C3fText = Rswift.StringResource(key: "21F-T1-c3f.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: $ 0.0
      ///
      /// Locales: en, fr
      static func is4ZdTP1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IS4-zd-tP1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IS4-zd-tP1.text"
        }

        return NSLocalizedString("IS4-zd-tP1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $ 0.0
      ///
      /// Locales: en, fr
      static func kzCZuNODText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KzC-Zu-NOD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KzC-Zu-NOD.text"
        }

        return NSLocalizedString("KzC-Zu-NOD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static func gfuZrKAFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gfu-zr-kAF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gfu-zr-kAF.text"
        }

        return NSLocalizedString("Gfu-zr-kAF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static func lVtBpAdzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lVt-bp-adz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lVt-bp-adz.text"
        }

        return NSLocalizedString("lVt-bp-adz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static func q83SQLQPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q83-sQ-lQP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Q83-sQ-lQP.text"
        }

        return NSLocalizedString("Q83-sQ-lQP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $ 1350
      ///
      /// Locales: en, fr
      static func qrxQKQchText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qrx-qK-qch.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Qrx-qK-qch.text"
        }

        return NSLocalizedString("Qrx-qK-qch.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $ 250.0
      ///
      /// Locales: en, fr
      static func kTNFhGCbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kTN-fh-gCb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kTN-fh-gCb.text"
        }

        return NSLocalizedString("kTN-fh-gCb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $ 250.0
      ///
      /// Locales: en, fr
      static func t3PQwNHbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("t3P-qw-NHb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "t3P-qw-NHb.text"
        }

        return NSLocalizedString("t3P-qw-NHb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en, fr
      static func bcXReB9eText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BcX-re-b9e.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BcX-re-b9e.text"
        }

        return NSLocalizedString("BcX-re-b9e.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en, fr
      static func oau8QFbpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OAU-8Q-fbp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OAU-8Q-fbp.text"
        }

        return NSLocalizedString("OAU-8Q-fbp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0 KM
      ///
      /// Locales: en, fr
      static func usue6ZmzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("USU-e6-Zmz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "USU-e6-Zmz.text"
        }

        return NSLocalizedString("USU-e6-Zmz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0000
      ///
      /// Locales: en, fr
      static func wxcFfCkHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WXC-Ff-ckH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WXC-Ff-ckH.text"
        }

        return NSLocalizedString("WXC-Ff-ckH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 
      ///
      /// Locales: en, fr
      static func h88ZPRJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2H8-8Z-pRJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2H8-8Z-pRJ.text"
        }

        return NSLocalizedString("2H8-8Z-pRJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 
      ///
      /// Locales: en, fr
      static func qEQMWlBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6qE-QM-WlB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6qE-QM-WlB.text"
        }

        return NSLocalizedString("6qE-QM-WlB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 hour
      ///
      /// Locales: en, fr
      static func fdG2MOaNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fdG-2M-oaN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fdG-2M-oaN.text"
        }

        return NSLocalizedString("fdG-2M-oaN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 hour
      ///
      /// Locales: en, fr
      static func rufIv6WVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ruf-iv-6WV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ruf-iv-6WV.text"
        }

        return NSLocalizedString("ruf-iv-6WV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 18:00 - 18:30
      ///
      /// Locales: en, fr
      static func nuBGJRRBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nuB-GJ-rRB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nuB-GJ-rRB.text"
        }

        return NSLocalizedString("nuB-GJ-rRB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 18:00 - 18:30
      ///
      /// Locales: en, fr
      static func pAyXmTRHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PAy-xm-TRH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PAy-xm-TRH.text"
        }

        return NSLocalizedString("PAy-xm-TRH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 2 km (5 Km)
      ///
      /// Locales: en, fr
      static func tYRSGYjhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tYR-SG-Yjh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tYR-SG-Yjh.text"
        }

        return NSLocalizedString("tYR-SG-Yjh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-10
      ///
      /// Locales: en, fr
      static func pVIFlLrOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pVI-Fl-LrO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pVI-Fl-LrO.text"
        }

        return NSLocalizedString("pVI-Fl-LrO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-10
      ///
      /// Locales: en, fr
      static func yeTQMFqcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yeT-QM-fqc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yeT-QM-fqc.text"
        }

        return NSLocalizedString("yeT-QM-fqc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 4.33(3)
      ///
      /// Locales: en, fr
      static func cEoMhpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("61C-Eo-Mhp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "61C-Eo-Mhp.text"
        }

        return NSLocalizedString("61C-Eo-Mhp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 98989898
      ///
      /// Locales: en, fr
      static func h0NOCHPJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H0N-OC-HPJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "H0N-OC-HPJ.text"
        }

        return NSLocalizedString("H0N-OC-HPJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 98989898
      ///
      /// Locales: en, fr
      static func tgTQgYwPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tgT-Qg-YwP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tgT-Qg-YwP.text"
        }

        return NSLocalizedString("tgT-Qg-YwP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ADD NEW CARD
      ///
      /// Locales: en, fr
      static func nacIMAvlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nac-iM-Avl.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Nac-iM-Avl.normalTitle"
        }

        return NSLocalizedString("Nac-iM-Avl.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, fr
      static func wm9ArXo7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wm9-ar-Xo7.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Wm9-ar-Xo7.normalTitle"
        }

        return NSLocalizedString("Wm9-ar-Xo7.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: About Details
      ///
      /// Locales: en, fr
      static func na5PeHpIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NA5-Pe-hpI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NA5-Pe-hpI.text"
        }

        return NSLocalizedString("NA5-Pe-hpI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: en, fr
      static func y7kHhWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("83Y-7k-hhW.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "83Y-7k-hhW.normalTitle"
        }

        return NSLocalizedString("83Y-7k-hhW.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static func cVlFP8IqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CVl-fP-8Iq.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CVl-fP-8Iq.normalTitle"
        }

        return NSLocalizedString("CVl-fP-8Iq.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static func hd2CgBzcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HD2-Cg-Bzc.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HD2-Cg-Bzc.normalTitle"
        }

        return NSLocalizedString("HD2-Cg-Bzc.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Account Holder Name
      ///
      /// Locales: en, fr
      static func unyW9XT4Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uny-w9-XT4.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Uny-w9-XT4.placeholder"
        }

        return NSLocalizedString("Uny-w9-XT4.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, fr
      static func xwB3BNhXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xwB-3B-NhX.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xwB-3B-NhX.normalTitle"
        }

        return NSLocalizedString("xwB-3B-NhX.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Image
      ///
      /// Locales: en, fr
      static func lQZ0UL41Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lQZ-0U-L41.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lQZ-0U-L41.text"
        }

        return NSLocalizedString("lQZ-0U-L41.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Image
      ///
      /// Locales: en, fr
      static func w3xBBImbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("W3x-BB-imb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "W3x-BB-imb.text"
        }

        return NSLocalizedString("W3x-BB-imb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Provider image
      ///
      /// Locales: en, fr
      static func sxmHqYuhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SXM-Hq-Yuh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SXM-Hq-Yuh.text"
        }

        return NSLocalizedString("SXM-Hq-Yuh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add provider Cover Image
      ///
      /// Locales: en, fr
      static func zveJlJxGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zve-jl-jxG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zve-jl-jxG.text"
        }

        return NSLocalizedString("zve-jl-jxG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add your Provider details
      ///
      /// Locales: en, fr
      static func gnaBhOzAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GNA-bh-ozA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GNA-bh-ozA.text"
        }

        return NSLocalizedString("GNA-bh-ozA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, fr
      static func vo6n9zsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3VO-6n-9zs.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3VO-6n-9zs.text"
        }

        return NSLocalizedString("3VO-6n-9zs.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, fr
      static func wa3IFXqoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WA3-IF-Xqo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WA3-IF-Xqo.text"
        }

        return NSLocalizedString("WA3-IF-Xqo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address Type
      ///
      /// Locales: en, fr
      static func oQzCkX4zPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OQz-ck-x4z.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OQz-ck-x4z.placeholder"
        }

        return NSLocalizedString("OQz-ck-x4z.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Admin Service Fee
      ///
      /// Locales: en, fr
      static func mcrExRSkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mcr-Ex-RSk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Mcr-Ex-RSk.text"
        }

        return NSLocalizedString("Mcr-Ex-RSk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account ?
      ///
      /// Locales: en, fr
      static func dJmBIAmvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DJm-bI-amv.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DJm-bI-amv.text"
        }

        return NSLocalizedString("DJm-bI-amv.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account ?
      ///
      /// Locales: en, fr
      static func xH8EORakText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xH8-eO-Rak.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xH8-eO-Rak.text"
        }

        return NSLocalizedString("xH8-eO-Rak.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Available Slot
      ///
      /// Locales: en, fr
      static func grA3Mw0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Gr-a3-Mw0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9Gr-a3-Mw0.text"
        }

        return NSLocalizedString("9Gr-a3-Mw0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Avg. Rating
      ///
      /// Locales: en, fr
      static func xDhAzEMeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xDh-Az-eMe.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xDh-Az-eMe.text"
        }

        return NSLocalizedString("xDh-Az-eMe.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Bank Branch Name
      ///
      /// Locales: en, fr
      static func u9U8iWWZPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("U9U-8i-WWZ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "U9U-8i-WWZ.placeholder"
        }

        return NSLocalizedString("U9U-8i-WWZ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Book
      ///
      /// Locales: en, fr
      static func nQlFTNgnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NQl-FT-Ngn.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NQl-FT-Ngn.normalTitle"
        }

        return NSLocalizedString("NQl-FT-Ngn.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Booking sent successfully, please wait for provider confirmation. You can see booking status in My Orders Tab
      ///
      /// Locales: en, fr
      static func vSEHg5iIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vSE-hg-5iI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vSE-hg-5iI.text"
        }

        return NSLocalizedString("vSE-hg-5iI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func eBAB6XarNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eBA-b6-xar.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eBA-b6-xar.normalTitle"
        }

        return NSLocalizedString("eBA-b6-xar.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func kOBJXIshNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kOB-jX-Ish.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kOB-jX-Ish.normalTitle"
        }

        return NSLocalizedString("kOB-jX-Ish.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func lntCeEWFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lnt-ce-eWF.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lnt-ce-eWF.normalTitle"
        }

        return NSLocalizedString("lnt-ce-eWF.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func znJ7ZrUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Zn-J7-ZrU.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5Zn-J7-ZrU.normalTitle"
        }

        return NSLocalizedString("5Zn-J7-ZrU.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Card Number
      ///
      /// Locales: en, fr
      static func dfBpRcZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6df-bp-RcZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6df-bp-RcZ.text"
        }

        return NSLocalizedString("6df-bp-RcZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: en, fr
      static func gchIiJUHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gch-Ii-jUH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gch-Ii-jUH.text"
        }

        return NSLocalizedString("gch-Ii-jUH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: en, fr
      static func o8oAWVDCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o8o-AW-vDC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o8o-AW-vDC.text"
        }

        return NSLocalizedString("o8o-AW-vDC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, fr
      static func bsILHM8EText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bsI-LH-M8E.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bsI-LH-M8E.text"
        }

        return NSLocalizedString("bsI-LH-M8E.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, fr
      static func vL2BiYspText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vL2-Bi-ysp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vL2-Bi-ysp.text"
        }

        return NSLocalizedString("vL2-Bi-ysp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: en, fr
      static func eO53veTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("58e-o5-3ve.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "58e-o5-3ve.title"
        }

        return NSLocalizedString("58e-o5-3ve.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: en, fr
      static func sHUFGKGUTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sHU-FG-KGU.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sHU-FG-KGU.title"
        }

        return NSLocalizedString("sHU-FG-KGU.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose User Type
      ///
      /// Locales: en, fr
      static func dXgUfANCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dXg-uf-ANC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dXg-uf-ANC.text"
        }

        return NSLocalizedString("dXg-uf-ANC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, fr
      static func b8OR04DTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b8O-R0-4DT.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "b8O-R0-4DT.normalTitle"
        }

        return NSLocalizedString("b8O-R0-4DT.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Company
      ///
      /// Locales: en, fr
      static func sluSmC9RPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slu-sm-C9R.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "slu-sm-C9R.placeholder"
        }

        return NSLocalizedString("slu-sm-C9R.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Complete
      ///
      /// Locales: en, fr
      static func gEY8KGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("69g-eY-8KG.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "69g-eY-8KG.normalTitle"
        }

        return NSLocalizedString("69g-eY-8KG.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, fr
      static func gatH0TFrPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gat-H0-tFr.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gat-H0-tFr.placeholder"
        }

        return NSLocalizedString("Gat-H0-tFr.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, fr
      static func uqAbHu5Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0UQ-ab-Hu5.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0UQ-ab-Hu5.placeholder"
        }

        return NSLocalizedString("0UQ-ab-Hu5.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, fr
      static func zkUSoZkjPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zkU-so-zkj.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zkU-so-zkj.placeholder"
        }

        return NSLocalizedString("zkU-so-zkj.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Contact Us
      ///
      /// Locales: en, fr
      static func gCb4ZWyRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GCb-4Z-wyR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GCb-4Z-wyR.text"
        }

        return NSLocalizedString("GCb-4Z-wyR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Contact Us
      ///
      /// Locales: en, fr
      static func ptnCCUbeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ptn-cC-Ube.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ptn-cC-Ube.text"
        }

        return NSLocalizedString("ptn-cC-Ube.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, fr
      static func duINDA9lNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DuI-ND-A9l.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DuI-ND-A9l.normalTitle"
        }

        return NSLocalizedString("DuI-ND-A9l.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Password
      ///
      /// Locales: en, fr
      static func mw8K08K8Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mw8-K0-8K8.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mw8-K0-8K8.placeholder"
        }

        return NSLocalizedString("mw8-K0-8K8.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Wallet Amount
      ///
      /// Locales: en, fr
      static func xx32XXUkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xx3-2X-XUk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xx3-2X-XUk.text"
        }

        return NSLocalizedString("xx3-2X-XUk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: DONE
      ///
      /// Locales: en, fr
      static func bqHJDSbxNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BqH-JD-Sbx.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BqH-JD-Sbx.normalTitle"
        }

        return NSLocalizedString("BqH-JD-Sbx.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Date & Time
      ///
      /// Locales: en, fr
      static func nOyIGZ8MText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nOy-IG-Z8M.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nOy-IG-Z8M.text"
        }

        return NSLocalizedString("nOy-IG-Z8M.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Date & Time
      ///
      /// Locales: en, fr
      static func sbEAgZwqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sbE-ag-zwq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sbE-ag-zwq.text"
        }

        return NSLocalizedString("sbE-ag-zwq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Date & Time
      ///
      /// Locales: en, fr
      static func xvmStZZ2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xvm-st-ZZ2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xvm-st-ZZ2.text"
        }

        return NSLocalizedString("xvm-st-ZZ2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, fr
      static func cUBAzKLcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cUB-Az-KLc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cUB-Az-KLc.text"
        }

        return NSLocalizedString("cUB-Az-KLc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, fr
      static func rpRJDInMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rpR-jD-InM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rpR-jD-InM.text"
        }

        return NSLocalizedString("rpR-jD-InM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, fr
      static func kOXPZPCRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kOX-pZ-pCR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kOX-pZ-pCR.text"
        }

        return NSLocalizedString("kOX-pZ-pCR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, fr
      static func sLLeFBLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9sL-Le-fBL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9sL-Le-fBL.text"
        }

        return NSLocalizedString("9sL-Le-fBL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, fr
      static func xepK5IjmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xep-k5-Ijm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xep-k5-Ijm.text"
        }

        return NSLocalizedString("xep-k5-Ijm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Do you have any specific instruction?
      ///
      /// Locales: en, fr
      static func pE8s27wText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6pE-8s-27w.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6pE-8s-27w.text"
        }

        return NSLocalizedString("6pE-8s-27w.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Don't have an account ? 
      ///
      /// Locales: en, fr
      static func dlLVYVNuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dlL-VY-VNu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dlL-VY-VNu.text"
        }

        return NSLocalizedString("dlL-VY-VNu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Duration
      ///
      /// Locales: en, fr
      static func bhA9DC2RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BhA-9D-c2R.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BhA-9D-c2R.text"
        }

        return NSLocalizedString("BhA-9D-c2R.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Earning
      ///
      /// Locales: en, fr
      static func k4We5XbTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6K4-we-5Xb.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6K4-we-5Xb.title"
        }

        return NSLocalizedString("6K4-we-5Xb.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, fr
      static func hn41Z4U5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hn4-1Z-4U5.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Hn4-1Z-4U5.normalTitle"
        }

        return NSLocalizedString("Hn4-1Z-4U5.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func boiVkPp6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Boi-vk-pp6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Boi-vk-pp6.text"
        }

        return NSLocalizedString("Boi-vk-pp6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func ezRNnYLdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EzR-Nn-YLd.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EzR-Nn-YLd.placeholder"
        }

        return NSLocalizedString("EzR-Nn-YLd.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func fT9ATSkePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fT9-AT-Ske.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fT9-AT-Ske.placeholder"
        }

        return NSLocalizedString("fT9-AT-Ske.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func hGfYd8kdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HGf-yd-8kd.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HGf-yd-8kd.placeholder"
        }

        return NSLocalizedString("HGf-yd-8kd.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func icyLhDLJPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Icy-lh-DLJ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Icy-lh-DLJ.placeholder"
        }

        return NSLocalizedString("Icy-lh-DLJ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func mEHGoLEFPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mEH-Go-LEF.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mEH-Go-LEF.placeholder"
        }

        return NSLocalizedString("mEH-Go-LEF.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func p1vIEKEJPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P1v-iE-kEJ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "P1v-iE-kEJ.placeholder"
        }

        return NSLocalizedString("P1v-iE-kEJ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func pgefxDgCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PGE-FX-dgC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PGE-FX-dgC.text"
        }

        return NSLocalizedString("PGE-FX-dgC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func rbPMaCQNPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RbP-ma-cQN.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RbP-ma-cQN.placeholder"
        }

        return NSLocalizedString("RbP-ma-cQN.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func xzVBpPc1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xzV-Bp-pc1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xzV-Bp-pc1.text"
        }

        return NSLocalizedString("xzV-Bp-pc1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, fr
      static func zEmCyPFHPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zEm-cy-pFH.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zEm-cy-pFH.placeholder"
        }

        return NSLocalizedString("zEm-cy-pFH.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, fr
      static func qZHEGIh0ConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qZH-eG-ih0.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qZH-eG-ih0.configuration.title"
        }

        return NSLocalizedString("qZH-eG-ih0.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, fr
      static func zd56XConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("892-ZD-56X.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "892-ZD-56X.configuration.title"
        }

        return NSLocalizedString("892-ZD-56X.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, fr
      static func fj1ACBX4Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FJ1-AC-bX4.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FJ1-AC-bX4.placeholder"
        }

        return NSLocalizedString("FJ1-AC-bX4.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, fr
      static func h8VBURbePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h8V-bU-rbe.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h8V-bU-rbe.placeholder"
        }

        return NSLocalizedString("h8V-bU-rbe.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, fr
      static func iJlBNX3kPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iJl-BN-X3k.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iJl-BN-X3k.placeholder"
        }

        return NSLocalizedString("iJl-BN-X3k.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, fr
      static func pcnQOCeFPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pcn-qO-CeF.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pcn-qO-CeF.placeholder"
        }

        return NSLocalizedString("pcn-qO-CeF.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Account Number
      ///
      /// Locales: en, fr
      static func t8UN9SkOPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T8U-n9-skO.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "T8U-n9-skO.placeholder"
        }

        return NSLocalizedString("T8U-n9-skO.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter IFSC code
      ///
      /// Locales: en, fr
      static func jjazayNyPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JJA-zA-YNy.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JJA-zA-YNy.placeholder"
        }

        return NSLocalizedString("JJA-zA-YNy.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Reason
      ///
      /// Locales: en, fr
      static func xeH9BXgaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XeH-9B-Xga.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XeH-9B-Xga.text"
        }

        return NSLocalizedString("XeH-9B-Xga.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter card number
      ///
      /// Locales: en, fr
      static func cz3QWW8NPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CZ3-qW-W8N.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CZ3-qW-W8N.placeholder"
        }

        return NSLocalizedString("CZ3-qW-W8N.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter expiry date
      ///
      /// Locales: en, fr
      static func wBn10U0nPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WBn-10-u0n.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WBn-10-u0n.placeholder"
        }

        return NSLocalizedString("WBn-10-u0n.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter name on card
      ///
      /// Locales: en, fr
      static func rNoDzIVhPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RNo-Dz-iVh.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RNo-Dz-iVh.placeholder"
        }

        return NSLocalizedString("RNo-Dz-iVh.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter security code
      ///
      /// Locales: en, fr
      static func tOr6gHGPPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tOr-6g-HGP.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tOr-6g-HGP.placeholder"
        }

        return NSLocalizedString("tOr-6g-HGP.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email address to rest your password
      ///
      /// Locales: en, fr
      static func nwuK3WHQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nwu-K3-wHQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Nwu-K3-wHQ.text"
        }

        return NSLocalizedString("Nwu-K3-wHQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Expiry Date
      ///
      /// Locales: en, fr
      static func kDzZH9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("00K-dz-zH9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "00K-dz-zH9.text"
        }

        return NSLocalizedString("00K-dz-zH9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, fr
      static func afgG6WXFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("afg-g6-WXF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "afg-g6-WXF.text"
        }

        return NSLocalizedString("afg-g6-WXF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, fr
      static func fzMLHhxPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2fz-mL-hhx.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2fz-mL-hhx.placeholder"
        }

        return NSLocalizedString("2fz-mL-hhx.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, fr
      static func lyQ9l2ijText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LyQ-9l-2ij.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LyQ-9l-2ij.text"
        }

        return NSLocalizedString("LyQ-9l-2ij.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, fr
      static func n0JIGGW5Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N0J-IG-gW5.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "N0J-IG-gW5.placeholder"
        }

        return NSLocalizedString("N0J-IG-gW5.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, fr
      static func nngatGpLPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NNG-AT-GpL.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NNG-AT-GpL.placeholder"
        }

        return NSLocalizedString("NNG-AT-GpL.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, fr
      static func um1XZPg8Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UM1-xZ-Pg8.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UM1-xZ-Pg8.placeholder"
        }

        return NSLocalizedString("UM1-xZ-Pg8.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: en, fr
      static func jyuGqLJvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jyu-gq-LJv.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "jyu-gq-LJv.text"
        }

        return NSLocalizedString("jyu-gq-LJv.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: en, fr
      static func gBa8jMmHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gBa-8j-mmH.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gBa-8j-mmH.normalTitle"
        }

        return NSLocalizedString("gBa-8j-mmH.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: French
      ///
      /// Locales: en, fr
      static func eRbWuNGZConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ERb-Wu-nGZ.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ERb-Wu-nGZ.configuration.title"
        }

        return NSLocalizedString("ERb-Wu-nGZ.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: French
      ///
      /// Locales: en, fr
      static func lSEG08YuConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lSE-g0-8Yu.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lSE-g0-8Yu.configuration.title"
        }

        return NSLocalizedString("lSE-g0-8Yu.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Gallary
      ///
      /// Locales: en, fr
      static func hMc1LUlRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HMc-1L-ulR.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HMc-1L-ulR.normalTitle"
        }

        return NSLocalizedString("HMc-1L-ulR.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, fr
      static func sccCPW8oText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scc-cP-W8o.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Scc-cP-W8o.text"
        }

        return NSLocalizedString("Scc-cP-W8o.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Hired
      ///
      /// Locales: en, fr
      static func r3VD9BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("67r-3V-d9B.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "67r-3V-d9B.text"
        }

        return NSLocalizedString("67r-3V-d9B.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, fr
      static func y8VBVFzRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Y8V-bV-fzR.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Y8V-bV-fzR.normalTitle"
        }

        return NSLocalizedString("Y8V-bV-fzR.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, fr
      static func mUs7ADh3Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mUs-7A-dh3.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mUs-7A-dh3.title"
        }

        return NSLocalizedString("mUs-7A-dh3.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, fr
      static func mVjD4YDVTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mVj-d4-yDV.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mVj-d4-yDV.title"
        }

        return NSLocalizedString("mVj-d4-yDV.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, fr
      static func o79VDD6HText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o79-VD-d6H.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o79-VD-d6H.text"
        }

        return NSLocalizedString("o79-VD-d6H.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home Cleaning
      ///
      /// Locales: en, fr
      static func b9s5tP39Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("B9s-5t-P39.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "B9s-5t-P39.text"
        }

        return NSLocalizedString("B9s-5t-P39.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home Cleaning
      ///
      /// Locales: en, fr
      static func hBdQLSooText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HBd-qL-Soo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HBd-qL-Soo.text"
        }

        return NSLocalizedString("HBd-qL-Soo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home Cleaning
      ///
      /// Locales: en, fr
      static func z2UB1XpXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Z2U-b1-xpX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Z2U-b1-xpX.text"
        }

        return NSLocalizedString("Z2U-b1-xpX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: I have read the CGU and accept them
      ///
      /// Locales: en, fr
      static func y818YucText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5y8-18-Yuc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5y8-18-Yuc.text"
        }

        return NSLocalizedString("5y8-18-Yuc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: I have read the CGV and accept them
      ///
      /// Locales: en, fr
      static func nsFSYGAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Ns-FS-yGA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0Ns-FS-yGA.text"
        }

        return NSLocalizedString("0Ns-FS-yGA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: I have read the Terms & Conditions and accept them
      ///
      /// Locales: en, fr
      static func mOpO0AJtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MOp-o0-AJt.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MOp-o0-AJt.text"
        }

        return NSLocalizedString("MOp-o0-AJt.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: If you cancel now you will be charged the cancelation fee 5%.
      ///
      /// Locales: en, fr
      static func rm6XaGNsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rm6-xa-gNs.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Rm6-xa-gNs.text"
        }

        return NSLocalizedString("Rm6-xa-gNs.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Invite Friend
      ///
      /// Locales: en, fr
      static func hJsCzBdKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hJs-cz-BdK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hJs-cz-BdK.text"
        }

        return NSLocalizedString("hJs-cz-BdK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Invite Friend
      ///
      /// Locales: en, fr
      static func t9q5UKXzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T9q-5U-kXz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "T9q-5U-kXz.text"
        }

        return NSLocalizedString("T9q-5U-kXz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: KFC
      ///
      /// Locales: en, fr
      static func jmcKcTslText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jmc-Kc-Tsl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Jmc-Kc-Tsl.text"
        }

        return NSLocalizedString("Jmc-Kc-Tsl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN
      ///
      /// Locales: en, fr
      static func x9hEAUQVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("x9h-eA-uQV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "x9h-eA-uQV.normalTitle"
        }

        return NSLocalizedString("x9h-eA-uQV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, fr
      static func nIYiQgxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9nI-Yi-Qgx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9nI-Yi-Qgx.text"
        }

        return NSLocalizedString("9nI-Yi-Qgx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, fr
      static func tgbvpZr1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TGB-vP-Zr1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TGB-vP-Zr1.text"
        }

        return NSLocalizedString("TGB-vP-Zr1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, fr
      static func xudK2ZUWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xud-k2-ZUW.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Xud-k2-ZUW.text"
        }

        return NSLocalizedString("Xud-k2-ZUW.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static func ai74MHvqPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ai7-4M-Hvq.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ai7-4M-Hvq.placeholder"
        }

        return NSLocalizedString("Ai7-4M-Hvq.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static func cjDa7ITPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Cj-da-7IT.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8Cj-da-7IT.placeholder"
        }

        return NSLocalizedString("8Cj-da-7IT.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static func fKbW1ZS6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fKb-W1-ZS6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fKb-W1-ZS6.text"
        }

        return NSLocalizedString("fKb-W1-ZS6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static func hvX44O0HPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hvX-44-o0H.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hvX-44-o0H.placeholder"
        }

        return NSLocalizedString("hvX-44-o0H.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static func iLXP4QM6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iLX-p4-qM6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iLX-p4-qM6.text"
        }

        return NSLocalizedString("iLX-p4-qM6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, fr
      static func lCtFmZoOPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LCt-fm-zoO.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LCt-fm-zoO.placeholder"
        }

        return NSLocalizedString("LCt-fm-zoO.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: List
      ///
      /// Locales: en, fr
      static func hbdE2ADaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hbd-e2-aDa.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hbd-e2-aDa.normalTitle"
        }

        return NSLocalizedString("hbd-e2-aDa.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, fr
      static func plfCXHIZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plf-cX-HIZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "plf-cX-HIZ.text"
        }

        return NSLocalizedString("plf-cX-HIZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, fr
      static func e5f4STAQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e5f-4S-TAQ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "e5f-4S-TAQ.normalTitle"
        }

        return NSLocalizedString("e5f-4S-TAQ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Login to your account
      ///
      /// Locales: en, fr
      static func zXJTvNHEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zXJ-tv-NHE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zXJ-tv-NHE.text"
        }

        return NSLocalizedString("zXJ-tv-NHE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, fr
      static func ecp0Z3uXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ecp-0Z-3uX.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ecp-0Z-3uX.normalTitle"
        }

        return NSLocalizedString("Ecp-0Z-3uX.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, fr
      static func kKPUDSoZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kKP-UD-SoZ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kKP-UD-SoZ.normalTitle"
        }

        return NSLocalizedString("kKP-UD-SoZ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Make Payment
      ///
      /// Locales: en, fr
      static func zd8FyKVNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zd8-Fy-kVN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zd8-Fy-kVN.text"
        }

        return NSLocalizedString("zd8-Fy-kVN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Manage Home Service Fee
      ///
      /// Locales: en, fr
      static func map4CVqCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Map-4C-VqC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Map-4C-VqC.text"
        }

        return NSLocalizedString("Map-4C-VqC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Manage Provider Profile
      ///
      /// Locales: en, fr
      static func yxULYBpmNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yxU-LY-bpm.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yxU-LY-bpm.normalTitle"
        }

        return NSLocalizedString("yxU-LY-bpm.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Map
      ///
      /// Locales: en, fr
      static func apxd9LRMNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("APX-D9-lRM.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "APX-D9-lRM.normalTitle"
        }

        return NSLocalizedString("APX-D9-lRM.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mary Lara
      ///
      /// Locales: en, fr
      static func b5XGZ22dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b5X-gZ-22d.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "b5X-gZ-22d.text"
        }

        return NSLocalizedString("b5X-gZ-22d.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func ap2RFR7hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ap2-rF-r7h.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ap2-rF-r7h.text"
        }

        return NSLocalizedString("Ap2-rF-r7h.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func cz4B05EAPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CZ4-B0-5EA.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CZ4-B0-5EA.placeholder"
        }

        return NSLocalizedString("CZ4-B0-5EA.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func e5xMcRlpPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("E5x-mc-rlp.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "E5x-mc-rlp.placeholder"
        }

        return NSLocalizedString("E5x-mc-rlp.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func heQMSChaPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HeQ-mS-Cha.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HeQ-mS-Cha.placeholder"
        }

        return NSLocalizedString("HeQ-mS-Cha.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func iCn6pVoyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iCn-6p-Voy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iCn-6p-Voy.text"
        }

        return NSLocalizedString("iCn-6p-Voy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func mSYYMTTMPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mSY-YM-tTM.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mSY-YM-tTM.placeholder"
        }

        return NSLocalizedString("mSY-YM-tTM.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func pxanHqIPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4PX-aN-HqI.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4PX-aN-HqI.placeholder"
        }

        return NSLocalizedString("4PX-aN-HqI.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, fr
      static func vn7LyTcmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vn7-ly-Tcm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vn7-ly-Tcm.text"
        }

        return NSLocalizedString("vn7-ly-Tcm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My Orders
      ///
      /// Locales: en, fr
      static func qnOLjEPgTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qnO-Lj-ePg.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qnO-Lj-ePg.title"
        }

        return NSLocalizedString("qnO-Lj-ePg.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My Reviews
      ///
      /// Locales: en, fr
      static func w2h1rMKHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w2h-1r-mKH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "w2h-1r-mKH.text"
        }

        return NSLocalizedString("w2h-1r-mKH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My Reviews
      ///
      /// Locales: en, fr
      static func yxRTAFXUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YxR-tA-FXU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YxR-tA-FXU.text"
        }

        return NSLocalizedString("YxR-tA-FXU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My Service
      ///
      /// Locales: en, fr
      static func e9S24WvHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e9S-24-wvH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "e9S-24-wvH.text"
        }

        return NSLocalizedString("e9S-24-wvH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name On Card
      ///
      /// Locales: en, fr
      static func ykJgHq7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Yk-Jg-hq7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0Yk-Jg-hq7.text"
        }

        return NSLocalizedString("0Yk-Jg-hq7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name*
      ///
      /// Locales: en, fr
      static func r2K43PETPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r2K-43-PET.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "r2K-43-PET.placeholder"
        }

        return NSLocalizedString("r2K-43-PET.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, fr
      static func ve3IJKxtPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VE3-IJ-Kxt.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VE3-IJ-Kxt.placeholder"
        }

        return NSLocalizedString("VE3-IJ-Kxt.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: New Request
      ///
      /// Locales: en, fr
      static func aD9NHdeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0aD-9N-hde.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0aD-9N-hde.normalTitle"
        }

        return NSLocalizedString("0aD-9N-hde.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Number Of Professional
      ///
      /// Locales: en, fr
      static func vx9WOBgYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vx9-WO-bgY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vx9-WO-bgY.text"
        }

        return NSLocalizedString("vx9-WO-bgY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Number Of Professional
      ///
      /// Locales: en, fr
      static func zjCsS9sText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6zj-Cs-S9s.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6zj-Cs-S9s.text"
        }

        return NSLocalizedString("6zj-Cs-S9s.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee Nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func b84XCIpTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("B84-XC-IpT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "B84-XC-IpT.text"
        }

        return NSLocalizedString("B84-XC-IpT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, fr
      static func eGhHNHbjPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eGh-HN-Hbj.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eGh-HN-Hbj.placeholder"
        }

        return NSLocalizedString("eGh-HN-Hbj.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, fr
      static func m3rCD4bAPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M3r-cD-4bA.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "M3r-cD-4bA.placeholder"
        }

        return NSLocalizedString("M3r-cD-4bA.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, fr
      static func oNeK0ESdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ONe-k0-eSd.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ONe-k0-eSd.placeholder"
        }

        return NSLocalizedString("ONe-k0-eSd.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pay Now
      ///
      /// Locales: en, fr
      static func xYzHjVFfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XYz-Hj-vFf.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XYz-Hj-vFf.normalTitle"
        }

        return NSLocalizedString("XYz-Hj-vFf.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: en, fr
      static func zCq0BHEBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZCq-0B-hEB.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZCq-0B-hEB.normalTitle"
        }

        return NSLocalizedString("ZCq-0B-hEB.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Please be sure before deleting the account.
      ///
      /// Locales: en, fr
      static func w8uQkBaRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w8u-qk-baR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "w8u-qk-baR.text"
        }

        return NSLocalizedString("w8u-qk-baR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, fr
      static func jyr8gImCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JYR-8g-imC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JYR-8g-imC.text"
        }

        return NSLocalizedString("JYR-8g-imC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, fr
      static func khBXkJEAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KhB-xk-jEA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KhB-xk-jEA.text"
        }

        return NSLocalizedString("KhB-xk-jEA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Detail
      ///
      /// Locales: en, fr
      static func ljmCjYeNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ljm-cj-YeN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ljm-cj-YeN.text"
        }

        return NSLocalizedString("ljm-cj-YeN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Detail
      ///
      /// Locales: en, fr
      static func reI5uEpLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ReI-5u-epL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ReI-5u-epL.text"
        }

        return NSLocalizedString("ReI-5u-epL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Price Detail
      ///
      /// Locales: en, fr
      static func saXHYXOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Sa-XH-yXO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3Sa-XH-yXO.text"
        }

        return NSLocalizedString("3Sa-XH-yXO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static func qdFI63hGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qdF-i6-3hG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qdF-i6-3hG.text"
        }

        return NSLocalizedString("qdF-i6-3hG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static func rl9YrEd7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rl9-Yr-Ed7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rl9-Yr-Ed7.text"
        }

        return NSLocalizedString("rl9-Yr-Ed7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, fr
      static func xfVEJ07UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xfV-eJ-07U.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xfV-eJ-07U.text"
        }

        return NSLocalizedString("xfV-eJ-07U.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Provide Your Rating
      ///
      /// Locales: en, fr
      static func pLD1BC4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0pL-d1-bC4.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0pL-d1-bC4.text"
        }

        return NSLocalizedString("0pL-d1-bC4.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Provider Name
      ///
      /// Locales: en, fr
      static func rBqIHBI4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RBq-IH-BI4.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RBq-IH-BI4.text"
        }

        return NSLocalizedString("RBq-IH-BI4.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: REGISTER
      ///
      /// Locales: en, fr
      static func hRUZ7NtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6hR-UZ-7Nt.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6hR-UZ-7Nt.normalTitle"
        }

        return NSLocalizedString("6hR-UZ-7Nt.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: REGISTER
      ///
      /// Locales: en, fr
      static func iCF350AuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iCF-35-0Au.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iCF-35-0Au.normalTitle"
        }

        return NSLocalizedString("iCF-35-0Au.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static func lbp6eLOVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LBP-6e-lOV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LBP-6e-lOV.text"
        }

        return NSLocalizedString("LBP-6e-lOV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Rate
      ///
      /// Locales: en, fr
      static func okYXdAJ1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OkY-Xd-aJ1.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OkY-Xd-aJ1.normalTitle"
        }

        return NSLocalizedString("OkY-Xd-aJ1.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, fr
      static func pWXN1CrqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pWX-N1-crq.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pWX-N1-crq.normalTitle"
        }

        return NSLocalizedString("pWX-N1-crq.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Reviews
      ///
      /// Locales: en, fr
      static func cRcOOVsUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CRc-OO-vsU.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CRc-OO-vsU.normalTitle"
        }

        return NSLocalizedString("CRc-OO-vsU.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Reviews
      ///
      /// Locales: en, fr
      static func hOiXhVhPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hOi-Xh-VhP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hOi-Xh-VhP.text"
        }

        return NSLocalizedString("hOi-Xh-VhP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, fr
      static func mjQEIB4MNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MjQ-EI-b4M.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MjQ-EI-b4M.normalTitle"
        }

        return NSLocalizedString("MjQ-EI-b4M.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, fr
      static func r9CbMlENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3r9-Cb-mlE.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3r9-Cb-mlE.normalTitle"
        }

        return NSLocalizedString("3r9-Cb-mlE.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, fr
      static func vdSO5Zb5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vdS-O5-Zb5.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vdS-O5-Zb5.normalTitle"
        }

        return NSLocalizedString("vdS-O5-Zb5.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, fr
      static func wckai1wVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WCK-AI-1wV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WCK-AI-1wV.normalTitle"
        }

        return NSLocalizedString("WCK-AI-1wV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, fr
      static func f7U74OWQPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("F7U-74-OWQ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "F7U-74-OWQ.placeholder"
        }

        return NSLocalizedString("F7U-74-OWQ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, fr
      static func lYgHKYbGPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lYg-hK-YbG.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lYg-hK-YbG.placeholder"
        }

        return NSLocalizedString("lYg-hK-YbG.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search Location
      ///
      /// Locales: en, fr
      static func lkDGeBbKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lkD-Ge-bbK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lkD-Ge-bbK.text"
        }

        return NSLocalizedString("lkD-Ge-bbK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Security Code
      ///
      /// Locales: en, fr
      static func xg5DaXWWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XG5-da-XWW.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XG5-da-XWW.text"
        }

        return NSLocalizedString("XG5-da-XWW.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static func bpEGqOuvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bpE-Gq-Ouv.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bpE-Gq-Ouv.normalTitle"
        }

        return NSLocalizedString("bpE-Gq-Ouv.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static func dm6TK5WYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DM6-tK-5WY.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DM6-tK-5WY.normalTitle"
        }

        return NSLocalizedString("DM6-tK-5WY.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static func mfhViRvRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mfh-vi-rvR.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mfh-vi-rvR.normalTitle"
        }

        return NSLocalizedString("mfh-vi-rvR.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: en, fr
      static func nzHYtY77NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NzH-yt-y77.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NzH-yt-y77.normalTitle"
        }

        return NSLocalizedString("NzH-yt-y77.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Language
      ///
      /// Locales: en, fr
      static func aidy0AeFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AID-y0-AeF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AID-y0-AeF.text"
        }

        return NSLocalizedString("AID-y0-AeF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Language
      ///
      /// Locales: en, fr
      static func bpN54F8NText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BpN-54-f8N.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BpN-54-f8N.text"
        }

        return NSLocalizedString("BpN-54-f8N.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static func gadLDSb8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gad-lD-sb8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gad-lD-sb8.text"
        }

        return NSLocalizedString("Gad-lD-sb8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static func lng2g3GFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lng-2g-3GF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Lng-2g-3GF.text"
        }

        return NSLocalizedString("Lng-2g-3GF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static func m6j3BT4fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m6j-3B-T4f.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "m6j-3B-T4f.text"
        }

        return NSLocalizedString("m6j-3B-T4f.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static func xWjCsL3TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xWj-cs-L3T.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xWj-cs-L3T.text"
        }

        return NSLocalizedString("xWj-cs-L3T.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: en, fr
      static func yzUEaUoKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yzU-ea-UoK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yzU-ea-UoK.text"
        }

        return NSLocalizedString("yzU-ea-UoK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Payment Card
      ///
      /// Locales: en, fr
      static func dd24pLakText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dd2-4p-lak.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dd2-4p-lak.text"
        }

        return NSLocalizedString("dd2-4p-lak.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Provider Location
      ///
      /// Locales: en, fr
      static func inQOA4VfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InQ-OA-4Vf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "InQ-OA-4Vf.text"
        }

        return NSLocalizedString("InQ-OA-4Vf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Provider Location
      ///
      /// Locales: en, fr
      static func j8pEFC45Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J8p-eF-c45.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J8p-eF-c45.text"
        }

        return NSLocalizedString("J8p-eF-c45.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Provider open and close time
      ///
      /// Locales: en, fr
      static func xsKBjZqpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XsK-Bj-zqp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XsK-Bj-zqp.text"
        }

        return NSLocalizedString("XsK-Bj-zqp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Rating
      ///
      /// Locales: en, fr
      static func dmFgQOEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Dm-fg-qOE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8Dm-fg-qOE.text"
        }

        return NSLocalizedString("8Dm-fg-qOE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Service Category
      ///
      /// Locales: en, fr
      static func pZaM7PtdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pZa-M7-ptd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pZa-M7-ptd.text"
        }

        return NSLocalizedString("pZa-M7-ptd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Service Category
      ///
      /// Locales: en, fr
      static func zzAHeTDaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZzA-He-tDa.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZzA-He-tDa.text"
        }

        return NSLocalizedString("ZzA-He-tDa.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Sub Category
      ///
      /// Locales: en, fr
      static func q5sXFYCnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q5s-xF-YCn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Q5s-xF-YCn.text"
        }

        return NSLocalizedString("Q5s-xF-YCn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Sub Category
      ///
      /// Locales: en, fr
      static func sjXJ9YviText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SjX-J9-Yvi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SjX-J9-Yvi.text"
        }

        return NSLocalizedString("SjX-J9-Yvi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Time
      ///
      /// Locales: en, fr
      static func mk64dEmpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mk6-4d-Emp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mk6-4d-Emp.text"
        }

        return NSLocalizedString("mk6-4d-Emp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Time
      ///
      /// Locales: en, fr
      static func oeHHCDQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Oe-HH-CDQ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8Oe-HH-CDQ.normalTitle"
        }

        return NSLocalizedString("8Oe-HH-CDQ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Time Interval
      ///
      /// Locales: en, fr
      static func fbEZUdhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5fb-eZ-Udh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5fb-eZ-Udh.text"
        }

        return NSLocalizedString("5fb-eZ-Udh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, fr
      static func biJJPZibNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BiJ-JP-zib.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BiJ-JP-zib.normalTitle"
        }

        return NSLocalizedString("BiJ-JP-zib.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, fr
      static func gjxIdRlTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gjx-Id-RlT.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gjx-Id-RlT.normalTitle"
        }

        return NSLocalizedString("gjx-Id-RlT.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, fr
      static func lnGOiN2JNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lnG-Oi-n2J.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lnG-Oi-n2J.normalTitle"
        }

        return NSLocalizedString("lnG-Oi-n2J.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send Request
      ///
      /// Locales: en, fr
      static func dLyQ9TTkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dLy-Q9-tTk.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dLy-Q9-tTk.normalTitle"
        }

        return NSLocalizedString("dLy-Q9-tTk.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sending
      ///
      /// Locales: en, fr
      static func qjeLS1L3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qje-LS-1L3.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qje-LS-1L3.normalTitle"
        }

        return NSLocalizedString("qje-LS-1L3.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Service
      ///
      /// Locales: en, fr
      static func uXBAmVUnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uXB-am-VUn.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uXB-am-VUn.normalTitle"
        }

        return NSLocalizedString("uXB-am-VUn.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Service Total
      ///
      /// Locales: en, fr
      static func aO1I5TaPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aO1-I5-taP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aO1-I5-taP.text"
        }

        return NSLocalizedString("aO1-I5-taP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Services
      ///
      /// Locales: en, fr
      static func xCdEYVcwTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XCd-eY-Vcw.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XCd-eY-Vcw.title"
        }

        return NSLocalizedString("XCd-eY-Vcw.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, fr
      static func bb4MWMFdTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bb4-mW-mFd.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bb4-mW-mFd.title"
        }

        return NSLocalizedString("bb4-mW-mFd.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, fr
      static func yPDMdOiwTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yPD-md-oiw.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yPD-md-oiw.title"
        }

        return NSLocalizedString("yPD-md-oiw.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Shyam Vijaywergiya
      ///
      /// Locales: en, fr
      static func gs3O3JKsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gs3-o3-JKs.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gs3-o3-JKs.text"
        }

        return NSLocalizedString("Gs3-o3-JKs.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Shyam Vijaywergiya
      ///
      /// Locales: en, fr
      static func k2cWxXbGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("k2c-wx-xbG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "k2c-wx-xbG.text"
        }

        return NSLocalizedString("k2c-wx-xbG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sign In Now
      ///
      /// Locales: en, fr
      static func w4PRBHBbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w4P-RB-HBb.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "w4P-RB-HBb.normalTitle"
        }

        return NSLocalizedString("w4P-RB-HBb.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sign In Now
      ///
      /// Locales: en, fr
      static func wbKPYHANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3wb-kP-YHA.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3wb-kP-YHA.normalTitle"
        }

        return NSLocalizedString("3wb-kP-YHA.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up Now
      ///
      /// Locales: en, fr
      static func yVHQBzqNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8yV-hQ-Bzq.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8yV-hQ-Bzq.normalTitle"
        }

        return NSLocalizedString("8yV-hQ-Bzq.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, fr
      static func v3cFFN7aText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v3c-FF-n7a.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "v3c-FF-n7a.text"
        }

        return NSLocalizedString("v3c-FF-n7a.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Terms And Condition
      ///
      /// Locales: en, fr
      static func oWxPf9FDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OWx-Pf-9FD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OWx-Pf-9FD.text"
        }

        return NSLocalizedString("OWx-Pf-9FD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, fr
      static func au1TI3yText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5AU-1T-i3y.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5AU-1T-i3y.text"
        }

        return NSLocalizedString("5AU-1T-i3y.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, fr
      static func pKbLwIS4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PKb-Lw-iS4.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PKb-Lw-iS4.text"
        }

        return NSLocalizedString("PKb-Lw-iS4.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: en, fr
      static func b1CUAAC8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b1C-uA-AC8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "b1C-uA-AC8.text"
        }

        return NSLocalizedString("b1C-uA-AC8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: en, fr
      static func rrmAISrmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rrm-AI-srm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rrm-AI-srm.text"
        }

        return NSLocalizedString("rrm-AI-srm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Today Earning
      ///
      /// Locales: en, fr
      static func hSGIX828Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hSG-IX-828.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hSG-IX-828.text"
        }

        return NSLocalizedString("hSG-IX-828.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Today Earning
      ///
      /// Locales: en, fr
      static func pf5YF8gdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pf5-yF-8gd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Pf5-yF-8gd.text"
        }

        return NSLocalizedString("Pf5-yF-8gd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, fr
      static func nvvIa4DjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nvv-ia-4Dj.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nvv-ia-4Dj.text"
        }

        return NSLocalizedString("nvv-ia-4Dj.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total 
      ///
      /// Locales: en, fr
      static func p43F4NCoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P43-F4-nCo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "P43-F4-nCo.text"
        }

        return NSLocalizedString("P43-F4-nCo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total 
      ///
      /// Locales: en, fr
      static func rJuXKJ5lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rJu-XK-J5l.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rJu-XK-J5l.text"
        }

        return NSLocalizedString("rJu-XK-J5l.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Earning
      ///
      /// Locales: en, fr
      static func iaCVN8eOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IaC-VN-8eO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IaC-VN-8eO.text"
        }

        return NSLocalizedString("IaC-VN-8eO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Earning
      ///
      /// Locales: en, fr
      static func lmFYIJ2GText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lmF-yI-j2G.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lmF-yI-j2G.text"
        }

        return NSLocalizedString("lmF-yI-j2G.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, fr
      static func c0MPfPVyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C0M-Pf-PVy.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "C0M-Pf-PVy.normalTitle"
        }

        return NSLocalizedString("C0M-Pf-PVy.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, fr
      static func jvlw3RKONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JVL-W3-rKO.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JVL-W3-rKO.normalTitle"
        }

        return NSLocalizedString("JVL-W3-rKO.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, fr
      static func lDiEdQGcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LDi-Ed-QGc.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LDi-Ed-QGc.normalTitle"
        }

        return NSLocalizedString("LDi-Ed-QGc.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Update Profile
      ///
      /// Locales: en, fr
      static func liEm0wAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1Li-em-0wA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1Li-em-0wA.text"
        }

        return NSLocalizedString("1Li-em-0wA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Update Profile
      ///
      /// Locales: en, fr
      static func tCjJtL9xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TCj-jt-L9x.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TCj-jt-L9x.text"
        }

        return NSLocalizedString("TCj-jt-L9x.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Upload Photos
      ///
      /// Locales: en, fr
      static func tbGEIwNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Tb-GE-iwN.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2Tb-GE-iwN.normalTitle"
        }

        return NSLocalizedString("2Tb-GE-iwN.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, fr
      static func mVCS61GlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mVC-s6-1Gl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mVC-s6-1Gl.text"
        }

        return NSLocalizedString("mVC-s6-1Gl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, fr
      static func xRcTHWyjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XRc-tH-Wyj.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XRc-tH-Wyj.text"
        }

        return NSLocalizedString("XRc-tH-Wyj.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Wallet Balance
      ///
      /// Locales: en, fr
      static func eRaCfLg2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eRa-cf-lg2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eRa-cf-lg2.text"
        }

        return NSLocalizedString("eRa-cf-lg2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Wallet Balance
      ///
      /// Locales: en, fr
      static func hlMDbI88Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hlM-Db-I88.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hlM-Db-I88.text"
        }

        return NSLocalizedString("hlM-Db-I88.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: When would you like your service?
      ///
      /// Locales: en, fr
      static func cXnEpPQAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cXn-ep-pQA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cXn-ep-pQA.text"
        }

        return NSLocalizedString("cXn-ep-pQA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, fr
      static func gw5IE37RNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gw5-iE-37R.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gw5-iE-37R.normalTitle"
        }

        return NSLocalizedString("Gw5-iE-37R.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, fr
      static func sQm0nRrwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sQm-0n-rrw.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sQm-0n-rrw.normalTitle"
        }

        return NSLocalizedString("sQm-0n-rrw.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Write something about your service
      ///
      /// Locales: en, fr
      static func s2D3P69Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5S2-D3-P69.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5S2-D3-P69.text"
        }

        return NSLocalizedString("5S2-D3-P69.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, fr
      static func xDpPc96oNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xDp-Pc-96o.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xDp-Pc-96o.normalTitle"
        }

        return NSLocalizedString("xDp-Pc-96o.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: You have 1 pending withdraw request for $ 1350
      ///
      /// Locales: en, fr
      static func b4yLftText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("28b-4y-Lft.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "28b-4y-Lft.text"
        }

        return NSLocalizedString("28b-4y-Lft.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: label
      ///
      /// Locales: en, fr
      static func ft1C3fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("21F-T1-c3f.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "21F-T1-c3f.text"
        }

        return NSLocalizedString("21F-T1-c3f.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.pendingCell` struct is generated, and contains static references to 6 localization keys.
    struct pendingCell {
      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static let xBzWHDdUText = Rswift.StringResource(key: "xBz-WH-DdU.text", tableName: "PendingCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static let frdvkf51Text = Rswift.StringResource(key: "FRD-vK-F51.text", tableName: "PendingCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let bcgZX6h3NormalTitle = Rswift.StringResource(key: "Bcg-zX-6h3.normalTitle", tableName: "PendingCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let a4UCzKYuText = Rswift.StringResource(key: "a4U-cz-KYu.text", tableName: "PendingCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static let tErWn0iZText = Rswift.StringResource(key: "tEr-Wn-0iZ.text", tableName: "PendingCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static let ao2NsHhHText = Rswift.StringResource(key: "ao2-Ns-hhH.text", tableName: "PendingCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static func xBzWHDdUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xBz-WH-DdU.text", tableName: "PendingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PendingCell", preferredLanguages: preferredLanguages) else {
          return "xBz-WH-DdU.text"
        }

        return NSLocalizedString("xBz-WH-DdU.text", tableName: "PendingCell", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static func frdvkf51Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FRD-vK-F51.text", tableName: "PendingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PendingCell", preferredLanguages: preferredLanguages) else {
          return "FRD-vK-F51.text"
        }

        return NSLocalizedString("FRD-vK-F51.text", tableName: "PendingCell", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func bcgZX6h3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bcg-zX-6h3.normalTitle", tableName: "PendingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PendingCell", preferredLanguages: preferredLanguages) else {
          return "Bcg-zX-6h3.normalTitle"
        }

        return NSLocalizedString("Bcg-zX-6h3.normalTitle", tableName: "PendingCell", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func a4UCzKYuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a4U-cz-KYu.text", tableName: "PendingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PendingCell", preferredLanguages: preferredLanguages) else {
          return "a4U-cz-KYu.text"
        }

        return NSLocalizedString("a4U-cz-KYu.text", tableName: "PendingCell", bundle: bundle, comment: "")
      }

      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static func tErWn0iZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tEr-Wn-0iZ.text", tableName: "PendingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PendingCell", preferredLanguages: preferredLanguages) else {
          return "tEr-Wn-0iZ.text"
        }

        return NSLocalizedString("tEr-Wn-0iZ.text", tableName: "PendingCell", bundle: bundle, comment: "")
      }

      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static func ao2NsHhHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ao2-Ns-hhH.text", tableName: "PendingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PendingCell", preferredLanguages: preferredLanguages) else {
          return "ao2-Ns-hhH.text"
        }

        return NSLocalizedString("ao2-Ns-hhH.text", tableName: "PendingCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.providerAcceptedCell` struct is generated, and contains static references to 10 localization keys.
    struct providerAcceptedCell {
      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static let fkdqa0BText = Rswift.StringResource(key: "4FK-dQ-A0B.text", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static let l6NGTHt3Text = Rswift.StringResource(key: "l6N-gT-Ht3.text", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static let yee6pOKmText = Rswift.StringResource(key: "yee-6p-oKm.text", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let dIBJfKtrNormalTitle = Rswift.StringResource(key: "dIB-Jf-Ktr.normalTitle", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: en, fr
      static let fu8N06SfNormalTitle = Rswift.StringResource(key: "fu8-N0-6Sf.normalTitle", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Complete
      ///
      /// Locales: en, fr
      static let jf2RwRRYNormalTitle = Rswift.StringResource(key: "jf2-rw-rRY.normalTitle", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let cpzGALWEText = Rswift.StringResource(key: "Cpz-gA-lWE.text", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static let y29H2N0yText = Rswift.StringResource(key: "y29-h2-n0y.text", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static let zriDDMVUText = Rswift.StringResource(key: "Zri-DD-MVU.text", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static let c1mFLYS9Text = Rswift.StringResource(key: "C1m-fL-YS9.text", tableName: "ProviderAcceptedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static func fkdqa0BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4FK-dQ-A0B.text", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "4FK-dQ-A0B.text"
        }

        return NSLocalizedString("4FK-dQ-A0B.text", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static func l6NGTHt3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l6N-gT-Ht3.text", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "l6N-gT-Ht3.text"
        }

        return NSLocalizedString("l6N-gT-Ht3.text", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Accepted
      ///
      /// Locales: en, fr
      static func yee6pOKmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yee-6p-oKm.text", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "yee-6p-oKm.text"
        }

        return NSLocalizedString("yee-6p-oKm.text", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func dIBJfKtrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dIB-Jf-Ktr.normalTitle", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "dIB-Jf-Ktr.normalTitle"
        }

        return NSLocalizedString("dIB-Jf-Ktr.normalTitle", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: en, fr
      static func fu8N06SfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fu8-N0-6Sf.normalTitle", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "fu8-N0-6Sf.normalTitle"
        }

        return NSLocalizedString("fu8-N0-6Sf.normalTitle", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Complete
      ///
      /// Locales: en, fr
      static func jf2RwRRYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jf2-rw-rRY.normalTitle", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "jf2-rw-rRY.normalTitle"
        }

        return NSLocalizedString("jf2-rw-rRY.normalTitle", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func cpzGALWEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cpz-gA-lWE.text", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "Cpz-gA-lWE.text"
        }

        return NSLocalizedString("Cpz-gA-lWE.text", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static func y29H2N0yText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y29-h2-n0y.text", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "y29-h2-n0y.text"
        }

        return NSLocalizedString("y29-h2-n0y.text", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Service : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static func zriDDMVUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zri-DD-MVU.text", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "Zri-DD-MVU.text"
        }

        return NSLocalizedString("Zri-DD-MVU.text", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static func c1mFLYS9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C1m-fL-YS9.text", tableName: "ProviderAcceptedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderAcceptedCell", preferredLanguages: preferredLanguages) else {
          return "C1m-fL-YS9.text"
        }

        return NSLocalizedString("C1m-fL-YS9.text", tableName: "ProviderAcceptedCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.providerCompletedCell` struct is generated, and contains static references to 7 localization keys.
    struct providerCompletedCell {
      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static let uWxQl9EJText = Rswift.StringResource(key: "uWx-Ql-9EJ.text", tableName: "ProviderCompletedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static let w7eGSUGUText = Rswift.StringResource(key: "w7e-GS-uGU.text", tableName: "ProviderCompletedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, fr
      static let ftBHwZqLText = Rswift.StringResource(key: "FtB-Hw-zqL.text", tableName: "ProviderCompletedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: en, fr
      static let dnLZFRNcNormalTitle = Rswift.StringResource(key: "dnL-zF-RNc.normalTitle", tableName: "ProviderCompletedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let oihcqmalText = Rswift.StringResource(key: "OIH-cQ-mAL.text", tableName: "ProviderCompletedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static let baBLKn7Text = Rswift.StringResource(key: "7Ba-bL-Kn7.text", tableName: "ProviderCompletedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static let rt6LqGaNText = Rswift.StringResource(key: "Rt6-lq-gaN.text", tableName: "ProviderCompletedCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static func uWxQl9EJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uWx-Ql-9EJ.text", tableName: "ProviderCompletedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderCompletedCell", preferredLanguages: preferredLanguages) else {
          return "uWx-Ql-9EJ.text"
        }

        return NSLocalizedString("uWx-Ql-9EJ.text", tableName: "ProviderCompletedCell", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static func w7eGSUGUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w7e-GS-uGU.text", tableName: "ProviderCompletedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderCompletedCell", preferredLanguages: preferredLanguages) else {
          return "w7e-GS-uGU.text"
        }

        return NSLocalizedString("w7e-GS-uGU.text", tableName: "ProviderCompletedCell", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, fr
      static func ftBHwZqLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FtB-Hw-zqL.text", tableName: "ProviderCompletedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderCompletedCell", preferredLanguages: preferredLanguages) else {
          return "FtB-Hw-zqL.text"
        }

        return NSLocalizedString("FtB-Hw-zqL.text", tableName: "ProviderCompletedCell", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: en, fr
      static func dnLZFRNcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dnL-zF-RNc.normalTitle", tableName: "ProviderCompletedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderCompletedCell", preferredLanguages: preferredLanguages) else {
          return "dnL-zF-RNc.normalTitle"
        }

        return NSLocalizedString("dnL-zF-RNc.normalTitle", tableName: "ProviderCompletedCell", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func oihcqmalText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OIH-cQ-mAL.text", tableName: "ProviderCompletedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderCompletedCell", preferredLanguages: preferredLanguages) else {
          return "OIH-cQ-mAL.text"
        }

        return NSLocalizedString("OIH-cQ-mAL.text", tableName: "ProviderCompletedCell", bundle: bundle, comment: "")
      }

      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static func baBLKn7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7Ba-bL-Kn7.text", tableName: "ProviderCompletedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderCompletedCell", preferredLanguages: preferredLanguages) else {
          return "7Ba-bL-Kn7.text"
        }

        return NSLocalizedString("7Ba-bL-Kn7.text", tableName: "ProviderCompletedCell", bundle: bundle, comment: "")
      }

      /// en translation: Service : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static func rt6LqGaNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rt6-lq-gaN.text", tableName: "ProviderCompletedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderCompletedCell", preferredLanguages: preferredLanguages) else {
          return "Rt6-lq-gaN.text"
        }

        return NSLocalizedString("Rt6-lq-gaN.text", tableName: "ProviderCompletedCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.providerNewReqCell` struct is generated, and contains static references to 8 localization keys.
    struct providerNewReqCell {
      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static let fXP4fZecText = Rswift.StringResource(key: "fXP-4f-zec.text", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2 km (5 min)
      ///
      /// Locales: en, fr
      static let mWhIdPd6Text = Rswift.StringResource(key: "MWh-Id-Pd6.text", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static let m4jGdTkLText = Rswift.StringResource(key: "m4j-gd-TkL.text", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, fr
      static let etA6p3hQNormalTitle = Rswift.StringResource(key: "EtA-6p-3hQ.normalTitle", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let xrIP4CQYNormalTitle = Rswift.StringResource(key: "XrI-P4-CQY.normalTitle", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static let xOfWcKLdText = Rswift.StringResource(key: "XOf-wc-KLd.text", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static let tfrGdSgZText = Rswift.StringResource(key: "TFR-Gd-sgZ.text", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static let rA8MAB84Text = Rswift.StringResource(key: "rA8-MA-B84.text", tableName: "ProviderNewReqCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: $ 350.0
      ///
      /// Locales: en, fr
      static func fXP4fZecText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fXP-4f-zec.text", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "fXP-4f-zec.text"
        }

        return NSLocalizedString("fXP-4f-zec.text", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      /// en translation: 2 km (5 min)
      ///
      /// Locales: en, fr
      static func mWhIdPd6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MWh-Id-Pd6.text", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "MWh-Id-Pd6.text"
        }

        return NSLocalizedString("MWh-Id-Pd6.text", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      /// en translation: 2023-10-02 09:00 - 09:30
      ///
      /// Locales: en, fr
      static func m4jGdTkLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m4j-gd-TkL.text", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "m4j-gd-TkL.text"
        }

        return NSLocalizedString("m4j-gd-TkL.text", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: en, fr
      static func etA6p3hQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EtA-6p-3hQ.normalTitle", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "EtA-6p-3hQ.normalTitle"
        }

        return NSLocalizedString("EtA-6p-3hQ.normalTitle", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func xrIP4CQYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XrI-P4-CQY.normalTitle", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "XrI-P4-CQY.normalTitle"
        }

        return NSLocalizedString("XrI-P4-CQY.normalTitle", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en, fr
      static func xOfWcKLdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XOf-wc-KLd.text", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "XOf-wc-KLd.text"
        }

        return NSLocalizedString("XOf-wc-KLd.text", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      /// en translation: Raj Provider
      ///
      /// Locales: en, fr
      static func tfrGdSgZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TFR-Gd-sgZ.text", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "TFR-Gd-sgZ.text"
        }

        return NSLocalizedString("TFR-Gd-sgZ.text", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      /// en translation: Service For : Test Renovation, Full Wall Wallpaper
      ///
      /// Locales: en, fr
      static func rA8MAB84Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rA8-MA-B84.text", tableName: "ProviderNewReqCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProviderNewReqCell", preferredLanguages: preferredLanguages) else {
          return "rA8-MA-B84.text"
        }

        return NSLocalizedString("rA8-MA-B84.text", tableName: "ProviderNewReqCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.searchResultCell` struct is generated, and contains static references to 5 localization keys.
    struct searchResultCell {
      /// en translation: 0.91 Km
      ///
      /// Locales: en, fr
      static let aQnPl4kIText = Rswift.StringResource(key: "aQn-Pl-4kI.text", tableName: "SearchResultCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 4.333(0)
      ///
      /// Locales: en, fr
      static let ks3D4QCNText = Rswift.StringResource(key: "ks3-d4-qCN.text", tableName: "SearchResultCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: P7, Saifee Nagar, Indore, Madhya Pradesh 452016, India, Madhya Pradesh
      ///
      /// Locales: en, fr
      static let xLeLb7dFText = Rswift.StringResource(key: "xLe-Lb-7dF.text", tableName: "SearchResultCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Provider
      ///
      /// Locales: en, fr
      static let pk598HhhText = Rswift.StringResource(key: "PK5-98-hhh.text", tableName: "SearchResultCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: View Details
      ///
      /// Locales: en, fr
      static let eOXRf3VuNormalTitle = Rswift.StringResource(key: "eOX-Rf-3Vu.normalTitle", tableName: "SearchResultCell", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: 0.91 Km
      ///
      /// Locales: en, fr
      static func aQnPl4kIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aQn-Pl-4kI.text", tableName: "SearchResultCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SearchResultCell", preferredLanguages: preferredLanguages) else {
          return "aQn-Pl-4kI.text"
        }

        return NSLocalizedString("aQn-Pl-4kI.text", tableName: "SearchResultCell", bundle: bundle, comment: "")
      }

      /// en translation: 4.333(0)
      ///
      /// Locales: en, fr
      static func ks3D4QCNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks3-d4-qCN.text", tableName: "SearchResultCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SearchResultCell", preferredLanguages: preferredLanguages) else {
          return "ks3-d4-qCN.text"
        }

        return NSLocalizedString("ks3-d4-qCN.text", tableName: "SearchResultCell", bundle: bundle, comment: "")
      }

      /// en translation: P7, Saifee Nagar, Indore, Madhya Pradesh 452016, India, Madhya Pradesh
      ///
      /// Locales: en, fr
      static func xLeLb7dFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xLe-Lb-7dF.text", tableName: "SearchResultCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SearchResultCell", preferredLanguages: preferredLanguages) else {
          return "xLe-Lb-7dF.text"
        }

        return NSLocalizedString("xLe-Lb-7dF.text", tableName: "SearchResultCell", bundle: bundle, comment: "")
      }

      /// en translation: Provider
      ///
      /// Locales: en, fr
      static func pk598HhhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PK5-98-hhh.text", tableName: "SearchResultCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SearchResultCell", preferredLanguages: preferredLanguages) else {
          return "PK5-98-hhh.text"
        }

        return NSLocalizedString("PK5-98-hhh.text", tableName: "SearchResultCell", bundle: bundle, comment: "")
      }

      /// en translation: View Details
      ///
      /// Locales: en, fr
      static func eOXRf3VuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eOX-Rf-3Vu.normalTitle", tableName: "SearchResultCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SearchResultCell", preferredLanguages: preferredLanguages) else {
          return "eOX-Rf-3Vu.normalTitle"
        }

        return NSLocalizedString("eOX-Rf-3Vu.normalTitle", tableName: "SearchResultCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AcceptedCell.validate()
      try _AddressCell.validate()
      try _ChatsCell.validate()
      try _CompleteCell.validate()
      try _ContServiceCell.validate()
      try _GallaryCell.validate()
      try _ImageCell.validate()
      try _LeftCell.validate()
      try _MyServiceCell.validate()
      try _PendingCell.validate()
      try _ProviderAcceptedCell.validate()
      try _ProviderCompletedCell.validate()
      try _ProviderEarningCell.validate()
      try _ProviderNewReqCell.validate()
      try _RightCell.validate()
      try _SearchResultCell.validate()
      try _ServiceCell.validate()
      try _SubCategoryCell.validate()
      try _TypeCell.validate()
    }

    struct _AcceptedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AcceptedCell

      let bundle = R.hostingBundle
      let identifier = "AcceptedCell"
      let name = "AcceptedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AcceptedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AcceptedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "barberback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barberback' is used in nib 'AcceptedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'AcceptedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'AcceptedCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AddressCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddressCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete_ic' is used in nib 'AddressCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'AddressCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CardCell

      let bundle = R.hostingBundle
      let identifier = "CardCell"
      let name = "CardCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardCell
      }

      fileprivate init() {}
    }

    struct _ChatsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatsCell

      let bundle = R.hostingBundle
      let identifier = "ChatsCell"
      let name = "ChatsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "customer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'customer' is used in nib 'ChatsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CompleteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CompleteCell

      let bundle = R.hostingBundle
      let identifier = "CompleteCell"
      let name = "CompleteCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CompleteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CompleteCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "barberback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barberback' is used in nib 'CompleteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'CompleteCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'CompleteCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ContServiceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ContServiceCell

      let bundle = R.hostingBundle
      let identifier = "ContServiceCell"
      let name = "ContServiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContServiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContServiceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in nib 'ContServiceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GallaryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GallaryCell

      let bundle = R.hostingBundle
      let identifier = "GallaryCell"
      let name = "GallaryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GallaryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GallaryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "booking_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'booking_back' is used in nib 'GallaryCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_vertical", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_vertical' is used in nib 'GallaryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ImageCell

      let bundle = R.hostingBundle
      let identifier = "ImageCell"
      let name = "ImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bannerimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bannerimg' is used in nib 'ImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LeftCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LeftCell

      let bundle = R.hostingBundle
      let identifier = "LeftCell"
      let name = "LeftCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in nib 'LeftCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyServiceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyServiceCell

      let bundle = R.hostingBundle
      let identifier = "MyServiceCell"
      let name = "MyServiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyServiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyServiceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "menu_vertical", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_vertical' is used in nib 'MyServiceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NewServiceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewServiceCell

      let bundle = R.hostingBundle
      let identifier = "NewServiceCell"
      let name = "NewServiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewServiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewServiceCell
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      fileprivate init() {}
    }

    struct _PendingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PendingCell

      let bundle = R.hostingBundle
      let identifier = "PendingCell"
      let name = "PendingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PendingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PendingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "barberback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barberback' is used in nib 'PendingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'PendingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'PendingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProChooseTimeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProChooseTimeCell

      let bundle = R.hostingBundle
      let identifier = "ProChooseTimeCell"
      let name = "ProChooseTimeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProChooseTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProChooseTimeCell
      }

      fileprivate init() {}
    }

    struct _ProviderAcceptedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProviderAcceptedCell

      let bundle = R.hostingBundle
      let identifier = "ProviderAcceptedCell"
      let name = "ProviderAcceptedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderAcceptedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderAcceptedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "barberback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barberback' is used in nib 'ProviderAcceptedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'ProviderAcceptedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'ProviderAcceptedCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderCompletedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProviderCompletedCell

      let bundle = R.hostingBundle
      let identifier = "ProviderCompletedCell"
      let name = "ProviderCompletedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCompletedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCompletedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "barberback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barberback' is used in nib 'ProviderCompletedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'ProviderCompletedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'ProviderCompletedCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderEarningCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProviderEarningCell

      let bundle = R.hostingBundle
      let identifier = "ProviderEarningCell"
      let name = "ProviderEarningCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderEarningCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderEarningCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "barberback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barberback' is used in nib 'ProviderEarningCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'ProviderEarningCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'ProviderEarningCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderNewReqCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProviderNewReqCell

      let bundle = R.hostingBundle
      let identifier = "ProviderNewReqCell"
      let name = "ProviderNewReqCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderNewReqCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderNewReqCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "barberback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barberback' is used in nib 'ProviderNewReqCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'ProviderNewReqCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'ProviderNewReqCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderTimeSlotCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProviderTimeSlotCell

      let bundle = R.hostingBundle
      let identifier = "ProviderTimeSlotCell"
      let name = "ProviderTimeSlotCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderTimeSlotCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderTimeSlotCell
      }

      fileprivate init() {}
    }

    struct _ReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ReviewCell

      let bundle = R.hostingBundle
      let identifier = "ReviewCell"
      let name = "ReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewCell
      }

      fileprivate init() {}
    }

    struct _RightCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RightCell

      let bundle = R.hostingBundle
      let identifier = "RightCell"
      let name = "RightCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RightCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in nib 'RightCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SearchResultCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchResultCell

      let bundle = R.hostingBundle
      let identifier = "SearchResultCell"
      let name = "SearchResultCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in nib 'SearchResultCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "provider_img", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'provider_img' is used in nib 'SearchResultCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'SearchResultCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'SearchResultCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ServiceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ServiceCell

      let bundle = R.hostingBundle
      let identifier = "ServiceCell"
      let name = "ServiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cleaning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cleaning' is used in nib 'ServiceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in nib 'ServiceCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SubCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SubCategoryCell

      let bundle = R.hostingBundle
      let identifier = "SubCategoryCell"
      let name = "SubCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in nib 'SubCategoryCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ThemeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ThemeColor' is used in nib 'SubCategoryCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TimeSlotCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TimeSlotCell

      let bundle = R.hostingBundle
      let identifier = "TimeSlotCell"
      let name = "TimeSlotCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimeSlotCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeSlotCell
      }

      fileprivate init() {}
    }

    struct _TypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TypeCell

      let bundle = R.hostingBundle
      let identifier = "TypeCell"
      let name = "TypeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TypeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "provider_choose_img", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'provider_choose_img' is used in nib 'TypeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Group 11545", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 11545' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let addressVC = StoryboardViewControllerResource<AddressVC>(identifier: "AddressVC")
      let bookingRequestVC = StoryboardViewControllerResource<BookingRequestVC>(identifier: "BookingRequestVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let chat = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Chat")
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let conListVC = StoryboardViewControllerResource<ConListVC>(identifier: "ConListVC")
      let conMapVC = StoryboardViewControllerResource<ConMapVC>(identifier: "ConMapVC")
      let conditionAndPolicyVC = StoryboardViewControllerResource<ConditionAndPolicyVC>(identifier: "ConditionAndPolicyVC")
      let confirmBookingVC = StoryboardViewControllerResource<ConfirmBookingVC>(identifier: "ConfirmBookingVC")
      let contAboutVC = StoryboardViewControllerResource<ContAboutVC>(identifier: "ContAboutVC")
      let contGallaryVC = StoryboardViewControllerResource<ContGallaryVC>(identifier: "ContGallaryVC")
      let contReviewVC = StoryboardViewControllerResource<ContReviewVC>(identifier: "ContReviewVC")
      let contServiceVC = StoryboardViewControllerResource<ContServiceVC>(identifier: "ContServiceVC")
      let contactUsVC = StoryboardViewControllerResource<ContactUsVC>(identifier: "ContactUsVC")
      let customerTaBBarVC = StoryboardViewControllerResource<CustomerTaBBarVC>(identifier: "CustomerTaBBarVC")
      let detailVC = StoryboardViewControllerResource<DetailVC>(identifier: "DetailVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let giveRatingVC = StoryboardViewControllerResource<GiveRatingVC>(identifier: "GiveRatingVC")
      let languageVC = StoryboardViewControllerResource<LanguageVC>(identifier: "LanguageVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let manageProfileVC = StoryboardViewControllerResource<ManageProfileVC>(identifier: "ManageProfileVC")
      let myOrder = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "My Order")
      let myReviewVC = StoryboardViewControllerResource<MyReviewVC>(identifier: "MyReviewVC")
      let name = "Main"
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let otpVC = StoryboardViewControllerResource<OtpVC>(identifier: "OtpVC")
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let presentCancelVC = StoryboardViewControllerResource<PresentCancelVC>(identifier: "PresentCancelVC")
      let presentConfirmationVC = StoryboardViewControllerResource<PresentConfirmationVC>(identifier: "PresentConfirmationVC")
      let presentDeleteVC = StoryboardViewControllerResource<PresentDeleteVC>(identifier: "PresentDeleteVC")
      let proChooseTimeVC = StoryboardViewControllerResource<ProChooseTimeVC>(identifier: "ProChooseTimeVC")
      let proWalletAmountVC = StoryboardViewControllerResource<ProWalletAmountVC>(identifier: "ProWalletAmountVC")
      let providerChangeLanguageVC = StoryboardViewControllerResource<ProviderChangeLanguageVC>(identifier: "ProviderChangeLanguageVC")
      let providerChatVC = StoryboardViewControllerResource<ProviderChatVC>(identifier: "ProviderChatVC")
      let providerEarningVC = StoryboardViewControllerResource<ProviderEarningVC>(identifier: "ProviderEarningVC")
      let providerEditProfileVC = StoryboardViewControllerResource<ProviderEditProfileVC>(identifier: "ProviderEditProfileVC")
      let providerGallaryVC = StoryboardViewControllerResource<ProviderGallaryVC>(identifier: "ProviderGallaryVC")
      let providerHomeVC = StoryboardViewControllerResource<ProviderHomeVC>(identifier: "ProviderHomeVC")
      let providerManageProfileVC = StoryboardViewControllerResource<ProviderManageProfileVC>(identifier: "ProviderManageProfileVC")
      let providerMyServiceVC = StoryboardViewControllerResource<ProviderMyServiceVC>(identifier: "ProviderMyServiceVC")
      let providerRequestDtVC = StoryboardViewControllerResource<ProviderRequestDtVC>(identifier: "ProviderRequestDtVC")
      let providerServiceVC = StoryboardViewControllerResource<ProviderServiceVC>(identifier: "ProviderServiceVC")
      let providerSettingVC = StoryboardViewControllerResource<ProviderSettingVC>(identifier: "ProviderSettingVC")
      let providerTabBarVC = StoryboardViewControllerResource<ProviderTabBarVC>(identifier: "ProviderTabBarVC")
      let providerUpdateServiceVC = StoryboardViewControllerResource<ProviderUpdateServiceVC>(identifier: "ProviderUpdateServiceVC")
      let providerWalletVC = StoryboardViewControllerResource<ProviderWalletVC>(identifier: "ProviderWalletVC")
      let savedCardVC = StoryboardViewControllerResource<SavedCardVC>(identifier: "SavedCardVC")
      let searchResultsVC = StoryboardViewControllerResource<SearchResultsVC>(identifier: "SearchResultsVC")
      let setting = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Setting")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")
      let subCategoryVC = StoryboardViewControllerResource<SubCategoryVC>(identifier: "SubCategoryVC")
      let typeVC = StoryboardViewControllerResource<TypeVC>(identifier: "TypeVC")
      let userChatVC = StoryboardViewControllerResource<UserChatVC>(identifier: "UserChatVC")
      let userHomeVC = StoryboardViewControllerResource<UserHomeVC>(identifier: "UserHomeVC")
      let userMyOrderVC = StoryboardViewControllerResource<UserMyOrderVC>(identifier: "UserMyOrderVC")
      let userReqDetailVC = StoryboardViewControllerResource<UserReqDetailVC>(identifier: "UserReqDetailVC")
      let userSettingVC = StoryboardViewControllerResource<UserSettingVC>(identifier: "UserSettingVC")

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func addressVC(_: Void = ()) -> AddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressVC)
      }

      func bookingRequestVC(_: Void = ()) -> BookingRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingRequestVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func chat(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chat)
      }

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func conListVC(_: Void = ()) -> ConListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: conListVC)
      }

      func conMapVC(_: Void = ()) -> ConMapVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: conMapVC)
      }

      func conditionAndPolicyVC(_: Void = ()) -> ConditionAndPolicyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: conditionAndPolicyVC)
      }

      func confirmBookingVC(_: Void = ()) -> ConfirmBookingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmBookingVC)
      }

      func contAboutVC(_: Void = ()) -> ContAboutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contAboutVC)
      }

      func contGallaryVC(_: Void = ()) -> ContGallaryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contGallaryVC)
      }

      func contReviewVC(_: Void = ()) -> ContReviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contReviewVC)
      }

      func contServiceVC(_: Void = ()) -> ContServiceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contServiceVC)
      }

      func contactUsVC(_: Void = ()) -> ContactUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsVC)
      }

      func customerTaBBarVC(_: Void = ()) -> CustomerTaBBarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customerTaBBarVC)
      }

      func detailVC(_: Void = ()) -> DetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func giveRatingVC(_: Void = ()) -> GiveRatingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: giveRatingVC)
      }

      func languageVC(_: Void = ()) -> LanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func manageProfileVC(_: Void = ()) -> ManageProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manageProfileVC)
      }

      func myOrder(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOrder)
      }

      func myReviewVC(_: Void = ()) -> MyReviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myReviewVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func otpVC(_: Void = ()) -> OtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVC)
      }

      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func presentCancelVC(_: Void = ()) -> PresentCancelVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentCancelVC)
      }

      func presentConfirmationVC(_: Void = ()) -> PresentConfirmationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentConfirmationVC)
      }

      func presentDeleteVC(_: Void = ()) -> PresentDeleteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentDeleteVC)
      }

      func proChooseTimeVC(_: Void = ()) -> ProChooseTimeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: proChooseTimeVC)
      }

      func proWalletAmountVC(_: Void = ()) -> ProWalletAmountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: proWalletAmountVC)
      }

      func providerChangeLanguageVC(_: Void = ()) -> ProviderChangeLanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerChangeLanguageVC)
      }

      func providerChatVC(_: Void = ()) -> ProviderChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerChatVC)
      }

      func providerEarningVC(_: Void = ()) -> ProviderEarningVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerEarningVC)
      }

      func providerEditProfileVC(_: Void = ()) -> ProviderEditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerEditProfileVC)
      }

      func providerGallaryVC(_: Void = ()) -> ProviderGallaryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerGallaryVC)
      }

      func providerHomeVC(_: Void = ()) -> ProviderHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerHomeVC)
      }

      func providerManageProfileVC(_: Void = ()) -> ProviderManageProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerManageProfileVC)
      }

      func providerMyServiceVC(_: Void = ()) -> ProviderMyServiceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerMyServiceVC)
      }

      func providerRequestDtVC(_: Void = ()) -> ProviderRequestDtVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerRequestDtVC)
      }

      func providerServiceVC(_: Void = ()) -> ProviderServiceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerServiceVC)
      }

      func providerSettingVC(_: Void = ()) -> ProviderSettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerSettingVC)
      }

      func providerTabBarVC(_: Void = ()) -> ProviderTabBarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerTabBarVC)
      }

      func providerUpdateServiceVC(_: Void = ()) -> ProviderUpdateServiceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerUpdateServiceVC)
      }

      func providerWalletVC(_: Void = ()) -> ProviderWalletVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerWalletVC)
      }

      func savedCardVC(_: Void = ()) -> SavedCardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: savedCardVC)
      }

      func searchResultsVC(_: Void = ()) -> SearchResultsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchResultsVC)
      }

      func setting(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setting)
      }

      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }

      func subCategoryVC(_: Void = ()) -> SubCategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subCategoryVC)
      }

      func typeVC(_: Void = ()) -> TypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: typeVC)
      }

      func userChatVC(_: Void = ()) -> UserChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userChatVC)
      }

      func userHomeVC(_: Void = ()) -> UserHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userHomeVC)
      }

      func userMyOrderVC(_: Void = ()) -> UserMyOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userMyOrderVC)
      }

      func userReqDetailVC(_: Void = ()) -> UserReqDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userReqDetailVC)
      }

      func userSettingVC(_: Void = ()) -> UserSettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSettingVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Chat24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Chat24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Earning24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Earning24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Edit24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Edit24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FindDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FindDark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 11546", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 11546' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HidePassword", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HidePassword' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Notification30", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Notification30' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Order24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Order24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SHLY (3) 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SHLY (3) 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Setting24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Setting24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Start 14", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Start 14' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'camera.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancelRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancelRed' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat_active' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.forward") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.forward' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "cleaning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cleaning' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contactus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Circle_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Circle_Black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconoir_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconoir_cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "invvite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'invvite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "language", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'language' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mastercard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mastercard' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "privacy_policy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'privacy_policy' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profiledeactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profiledeactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "reviews-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'reviews-outline' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "servicelist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'servicelist' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "terms_conditions", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'terms_conditions' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visa' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ThemeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ThemeColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'Main' as 'AddressPickerVC'.") }
        if _R.storyboard.main().addressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressVC' could not be loaded from storyboard 'Main' as 'AddressVC'.") }
        if _R.storyboard.main().bookingRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingRequestVC' could not be loaded from storyboard 'Main' as 'BookingRequestVC'.") }
        if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
        if _R.storyboard.main().chat() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chat' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Main' as 'ChatVC'.") }
        if _R.storyboard.main().conListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'conListVC' could not be loaded from storyboard 'Main' as 'ConListVC'.") }
        if _R.storyboard.main().conMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'conMapVC' could not be loaded from storyboard 'Main' as 'ConMapVC'.") }
        if _R.storyboard.main().conditionAndPolicyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'conditionAndPolicyVC' could not be loaded from storyboard 'Main' as 'ConditionAndPolicyVC'.") }
        if _R.storyboard.main().confirmBookingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmBookingVC' could not be loaded from storyboard 'Main' as 'ConfirmBookingVC'.") }
        if _R.storyboard.main().contAboutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contAboutVC' could not be loaded from storyboard 'Main' as 'ContAboutVC'.") }
        if _R.storyboard.main().contGallaryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contGallaryVC' could not be loaded from storyboard 'Main' as 'ContGallaryVC'.") }
        if _R.storyboard.main().contReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contReviewVC' could not be loaded from storyboard 'Main' as 'ContReviewVC'.") }
        if _R.storyboard.main().contServiceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contServiceVC' could not be loaded from storyboard 'Main' as 'ContServiceVC'.") }
        if _R.storyboard.main().contactUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsVC' could not be loaded from storyboard 'Main' as 'ContactUsVC'.") }
        if _R.storyboard.main().customerTaBBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customerTaBBarVC' could not be loaded from storyboard 'Main' as 'CustomerTaBBarVC'.") }
        if _R.storyboard.main().detailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailVC' could not be loaded from storyboard 'Main' as 'DetailVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().giveRatingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'giveRatingVC' could not be loaded from storyboard 'Main' as 'GiveRatingVC'.") }
        if _R.storyboard.main().languageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageVC' could not be loaded from storyboard 'Main' as 'LanguageVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().manageProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manageProfileVC' could not be loaded from storyboard 'Main' as 'ManageProfileVC'.") }
        if _R.storyboard.main().myOrder() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOrder' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().myReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myReviewVC' could not be loaded from storyboard 'Main' as 'MyReviewVC'.") }
        if _R.storyboard.main().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationVC'.") }
        if _R.storyboard.main().otpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVC' could not be loaded from storyboard 'Main' as 'OtpVC'.") }
        if _R.storyboard.main().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Main' as 'PaymentVC'.") }
        if _R.storyboard.main().presentCancelVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentCancelVC' could not be loaded from storyboard 'Main' as 'PresentCancelVC'.") }
        if _R.storyboard.main().presentConfirmationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentConfirmationVC' could not be loaded from storyboard 'Main' as 'PresentConfirmationVC'.") }
        if _R.storyboard.main().presentDeleteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentDeleteVC' could not be loaded from storyboard 'Main' as 'PresentDeleteVC'.") }
        if _R.storyboard.main().proChooseTimeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'proChooseTimeVC' could not be loaded from storyboard 'Main' as 'ProChooseTimeVC'.") }
        if _R.storyboard.main().proWalletAmountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'proWalletAmountVC' could not be loaded from storyboard 'Main' as 'ProWalletAmountVC'.") }
        if _R.storyboard.main().providerChangeLanguageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerChangeLanguageVC' could not be loaded from storyboard 'Main' as 'ProviderChangeLanguageVC'.") }
        if _R.storyboard.main().providerChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerChatVC' could not be loaded from storyboard 'Main' as 'ProviderChatVC'.") }
        if _R.storyboard.main().providerEarningVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerEarningVC' could not be loaded from storyboard 'Main' as 'ProviderEarningVC'.") }
        if _R.storyboard.main().providerEditProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerEditProfileVC' could not be loaded from storyboard 'Main' as 'ProviderEditProfileVC'.") }
        if _R.storyboard.main().providerGallaryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerGallaryVC' could not be loaded from storyboard 'Main' as 'ProviderGallaryVC'.") }
        if _R.storyboard.main().providerHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerHomeVC' could not be loaded from storyboard 'Main' as 'ProviderHomeVC'.") }
        if _R.storyboard.main().providerManageProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerManageProfileVC' could not be loaded from storyboard 'Main' as 'ProviderManageProfileVC'.") }
        if _R.storyboard.main().providerMyServiceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerMyServiceVC' could not be loaded from storyboard 'Main' as 'ProviderMyServiceVC'.") }
        if _R.storyboard.main().providerRequestDtVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerRequestDtVC' could not be loaded from storyboard 'Main' as 'ProviderRequestDtVC'.") }
        if _R.storyboard.main().providerServiceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerServiceVC' could not be loaded from storyboard 'Main' as 'ProviderServiceVC'.") }
        if _R.storyboard.main().providerSettingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerSettingVC' could not be loaded from storyboard 'Main' as 'ProviderSettingVC'.") }
        if _R.storyboard.main().providerTabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerTabBarVC' could not be loaded from storyboard 'Main' as 'ProviderTabBarVC'.") }
        if _R.storyboard.main().providerUpdateServiceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerUpdateServiceVC' could not be loaded from storyboard 'Main' as 'ProviderUpdateServiceVC'.") }
        if _R.storyboard.main().providerWalletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerWalletVC' could not be loaded from storyboard 'Main' as 'ProviderWalletVC'.") }
        if _R.storyboard.main().savedCardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'savedCardVC' could not be loaded from storyboard 'Main' as 'SavedCardVC'.") }
        if _R.storyboard.main().searchResultsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchResultsVC' could not be loaded from storyboard 'Main' as 'SearchResultsVC'.") }
        if _R.storyboard.main().setting() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setting' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Main' as 'SignupVC'.") }
        if _R.storyboard.main().subCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subCategoryVC' could not be loaded from storyboard 'Main' as 'SubCategoryVC'.") }
        if _R.storyboard.main().typeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'typeVC' could not be loaded from storyboard 'Main' as 'TypeVC'.") }
        if _R.storyboard.main().userChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userChatVC' could not be loaded from storyboard 'Main' as 'UserChatVC'.") }
        if _R.storyboard.main().userHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userHomeVC' could not be loaded from storyboard 'Main' as 'UserHomeVC'.") }
        if _R.storyboard.main().userMyOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userMyOrderVC' could not be loaded from storyboard 'Main' as 'UserMyOrderVC'.") }
        if _R.storyboard.main().userReqDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userReqDetailVC' could not be loaded from storyboard 'Main' as 'UserReqDetailVC'.") }
        if _R.storyboard.main().userSettingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSettingVC' could not be loaded from storyboard 'Main' as 'UserSettingVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
